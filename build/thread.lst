ARM GAS  /tmp/cc7VB9gc.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"thread.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._thread_cleanup_execute,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	_thread_cleanup_execute:
  24              	.LVL0:
  25              	.LFB15:
  26              		.file 1 "rt_thread/src/thread.c"
   1:rt_thread/src/thread.c **** /*
   2:rt_thread/src/thread.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rt_thread/src/thread.c ****  *
   4:rt_thread/src/thread.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/src/thread.c ****  *
   6:rt_thread/src/thread.c ****  * Change Logs:
   7:rt_thread/src/thread.c ****  * Date           Author       Notes
   8:rt_thread/src/thread.c ****  * 2006-03-28     Bernard      first version
   9:rt_thread/src/thread.c ****  * 2006-04-29     Bernard      implement thread timer
  10:rt_thread/src/thread.c ****  * 2006-04-30     Bernard      added THREAD_DEBUG
  11:rt_thread/src/thread.c ****  * 2006-05-27     Bernard      fixed the rt_thread_yield bug
  12:rt_thread/src/thread.c ****  * 2006-06-03     Bernard      fixed the thread timer init bug
  13:rt_thread/src/thread.c ****  * 2006-08-10     Bernard      fixed the timer bug in thread_sleep
  14:rt_thread/src/thread.c ****  * 2006-09-03     Bernard      changed rt_timer_delete to rt_timer_detach
  15:rt_thread/src/thread.c ****  * 2006-09-03     Bernard      implement rt_thread_detach
  16:rt_thread/src/thread.c ****  * 2008-02-16     Bernard      fixed the rt_thread_timeout bug
  17:rt_thread/src/thread.c ****  * 2010-03-21     Bernard      change the errno of rt_thread_delay/sleep to
  18:rt_thread/src/thread.c ****  *                             RT_EOK.
  19:rt_thread/src/thread.c ****  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
  20:rt_thread/src/thread.c ****  * 2011-09-01     Bernard      fixed rt_thread_exit issue when the current
  21:rt_thread/src/thread.c ****  *                             thread preempted, which reported by Jiaxing Lee.
  22:rt_thread/src/thread.c ****  * 2011-09-08     Bernard      fixed the scheduling issue in rt_thread_startup.
  23:rt_thread/src/thread.c ****  * 2012-12-29     Bernard      fixed compiling warning.
  24:rt_thread/src/thread.c ****  * 2016-08-09     ArdaFu       add thread suspend and resume hook.
  25:rt_thread/src/thread.c ****  * 2017-04-10     armink       fixed the rt_thread_delete and rt_thread_detach
  26:rt_thread/src/thread.c ****                                bug when thread has not startup.
  27:rt_thread/src/thread.c ****  * 2018-11-22     Jesven       yield is same to rt_schedule
  28:rt_thread/src/thread.c ****  *                             add support for tasks bound to cpu
  29:rt_thread/src/thread.c ****  */
  30:rt_thread/src/thread.c **** 
  31:rt_thread/src/thread.c **** #include <rthw.h>
  32:rt_thread/src/thread.c **** #include <rtthread.h>
ARM GAS  /tmp/cc7VB9gc.s 			page 2


  33:rt_thread/src/thread.c **** 
  34:rt_thread/src/thread.c **** extern rt_list_t rt_thread_priority_table[RT_THREAD_PRIORITY_MAX];
  35:rt_thread/src/thread.c **** extern struct rt_thread *rt_current_thread;
  36:rt_thread/src/thread.c **** extern rt_list_t rt_thread_defunct;
  37:rt_thread/src/thread.c **** 
  38:rt_thread/src/thread.c **** #ifdef RT_USING_HOOK
  39:rt_thread/src/thread.c **** 
  40:rt_thread/src/thread.c **** static void (*rt_thread_suspend_hook)(rt_thread_t thread);
  41:rt_thread/src/thread.c **** static void (*rt_thread_resume_hook) (rt_thread_t thread);
  42:rt_thread/src/thread.c **** static void (*rt_thread_inited_hook) (rt_thread_t thread);
  43:rt_thread/src/thread.c **** 
  44:rt_thread/src/thread.c **** /**
  45:rt_thread/src/thread.c ****  * @ingroup Hook
  46:rt_thread/src/thread.c ****  * This function sets a hook function when the system suspend a thread.
  47:rt_thread/src/thread.c ****  *
  48:rt_thread/src/thread.c ****  * @param hook the specified hook function
  49:rt_thread/src/thread.c ****  *
  50:rt_thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  51:rt_thread/src/thread.c ****  */
  52:rt_thread/src/thread.c **** void rt_thread_suspend_sethook(void (*hook)(rt_thread_t thread))
  53:rt_thread/src/thread.c **** {
  54:rt_thread/src/thread.c ****     rt_thread_suspend_hook = hook;
  55:rt_thread/src/thread.c **** }
  56:rt_thread/src/thread.c **** 
  57:rt_thread/src/thread.c **** /**
  58:rt_thread/src/thread.c ****  * @ingroup Hook
  59:rt_thread/src/thread.c ****  * This function sets a hook function when the system resume a thread.
  60:rt_thread/src/thread.c ****  *
  61:rt_thread/src/thread.c ****  * @param hook the specified hook function
  62:rt_thread/src/thread.c ****  *
  63:rt_thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  64:rt_thread/src/thread.c ****  */
  65:rt_thread/src/thread.c **** void rt_thread_resume_sethook(void (*hook)(rt_thread_t thread))
  66:rt_thread/src/thread.c **** {
  67:rt_thread/src/thread.c ****     rt_thread_resume_hook = hook;
  68:rt_thread/src/thread.c **** }
  69:rt_thread/src/thread.c **** 
  70:rt_thread/src/thread.c **** /**
  71:rt_thread/src/thread.c ****  * @ingroup Hook
  72:rt_thread/src/thread.c ****  * This function sets a hook function when a thread is initialized.
  73:rt_thread/src/thread.c ****  *
  74:rt_thread/src/thread.c ****  * @param hook the specified hook function
  75:rt_thread/src/thread.c ****  */
  76:rt_thread/src/thread.c **** void rt_thread_inited_sethook(void (*hook)(rt_thread_t thread))
  77:rt_thread/src/thread.c **** {
  78:rt_thread/src/thread.c ****     rt_thread_inited_hook = hook;
  79:rt_thread/src/thread.c **** }
  80:rt_thread/src/thread.c **** 
  81:rt_thread/src/thread.c **** #endif
  82:rt_thread/src/thread.c **** 
  83:rt_thread/src/thread.c **** /* must be invoke witch rt_hw_interrupt_disable */
  84:rt_thread/src/thread.c **** static void _thread_cleanup_execute(rt_thread_t thread)
  85:rt_thread/src/thread.c **** {
  27              		.loc 1 85 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7VB9gc.s 			page 3


  31              		.loc 1 85 1 is_stmt 0 view .LVU1
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
  86:rt_thread/src/thread.c ****     register rt_base_t level;
  40              		.loc 1 86 5 is_stmt 1 view .LVU2
  87:rt_thread/src/thread.c **** 
  88:rt_thread/src/thread.c ****     level = rt_hw_interrupt_disable();
  41              		.loc 1 88 5 view .LVU3
  42              		.loc 1 88 13 is_stmt 0 view .LVU4
  43 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
  44              	.LVL1:
  45              		.loc 1 88 13 view .LVU5
  46 0008 0546     		mov	r5, r0
  47              	.LVL2:
  89:rt_thread/src/thread.c **** 
  90:rt_thread/src/thread.c ****     /* invoke thread cleanup */
  91:rt_thread/src/thread.c ****     if (thread->cleanup != RT_NULL)
  48              		.loc 1 91 5 is_stmt 1 view .LVU6
  49              		.loc 1 91 15 is_stmt 0 view .LVU7
  50 000a 236F     		ldr	r3, [r4, #112]
  51              		.loc 1 91 8 view .LVU8
  52 000c 0BB1     		cbz	r3, .L2
  92:rt_thread/src/thread.c ****         thread->cleanup(thread);
  53              		.loc 1 92 9 is_stmt 1 view .LVU9
  54 000e 2046     		mov	r0, r4
  55              	.LVL3:
  56              		.loc 1 92 9 is_stmt 0 view .LVU10
  57 0010 9847     		blx	r3
  58              	.LVL4:
  59              	.L2:
  93:rt_thread/src/thread.c **** 
  94:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(level);
  60              		.loc 1 94 5 is_stmt 1 view .LVU11
  61 0012 2846     		mov	r0, r5
  62 0014 FFF7FEFF 		bl	rt_hw_interrupt_enable
  63              	.LVL5:
  95:rt_thread/src/thread.c **** }
  64              		.loc 1 95 1 is_stmt 0 view .LVU12
  65 0018 38BD     		pop	{r3, r4, r5, pc}
  66              		.loc 1 95 1 view .LVU13
  67              		.cfi_endproc
  68              	.LFE15:
  70              		.section	.text.rt_thread_exit,"ax",%progbits
  71              		.align	1
  72              		.global	rt_thread_exit
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  77              	rt_thread_exit:
  78              	.LFB16:
  96:rt_thread/src/thread.c **** 
ARM GAS  /tmp/cc7VB9gc.s 			page 4


  97:rt_thread/src/thread.c **** void rt_thread_exit(void)
  98:rt_thread/src/thread.c **** {
  79              		.loc 1 98 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 38B5     		push	{r3, r4, r5, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86              		.cfi_offset 3, -16
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 5, -8
  89              		.cfi_offset 14, -4
  99:rt_thread/src/thread.c ****     struct rt_thread *thread;
  90              		.loc 1 99 5 view .LVU15
 100:rt_thread/src/thread.c ****     register rt_base_t level;
  91              		.loc 1 100 5 view .LVU16
 101:rt_thread/src/thread.c **** 
 102:rt_thread/src/thread.c ****     /* get current thread */
 103:rt_thread/src/thread.c ****     thread = rt_current_thread;
  92              		.loc 1 103 5 view .LVU17
  93              		.loc 1 103 12 is_stmt 0 view .LVU18
  94 0002 144B     		ldr	r3, .L9
  95 0004 1C68     		ldr	r4, [r3]
  96              	.LVL6:
 104:rt_thread/src/thread.c **** 
 105:rt_thread/src/thread.c ****     /* disable interrupt */
 106:rt_thread/src/thread.c ****     level = rt_hw_interrupt_disable();
  97              		.loc 1 106 5 is_stmt 1 view .LVU19
  98              		.loc 1 106 13 is_stmt 0 view .LVU20
  99 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 100              	.LVL7:
 101 000a 0546     		mov	r5, r0
 102              	.LVL8:
 107:rt_thread/src/thread.c **** 
 108:rt_thread/src/thread.c ****     _thread_cleanup_execute(thread);
 103              		.loc 1 108 5 is_stmt 1 view .LVU21
 104 000c 2046     		mov	r0, r4
 105              	.LVL9:
 106              		.loc 1 108 5 is_stmt 0 view .LVU22
 107 000e FFF7FEFF 		bl	_thread_cleanup_execute
 108              	.LVL10:
 109:rt_thread/src/thread.c **** 
 110:rt_thread/src/thread.c ****     /* remove from schedule */
 111:rt_thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 109              		.loc 1 111 5 is_stmt 1 view .LVU23
 110 0012 2046     		mov	r0, r4
 111 0014 FFF7FEFF 		bl	rt_schedule_remove_thread
 112              	.LVL11:
 112:rt_thread/src/thread.c ****     /* change stat */
 113:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 113              		.loc 1 113 5 view .LVU24
 114              		.loc 1 113 18 is_stmt 0 view .LVU25
 115 0018 0423     		movs	r3, #4
 116 001a 84F83430 		strb	r3, [r4, #52]
 114:rt_thread/src/thread.c **** 
 115:rt_thread/src/thread.c ****     /* remove it from timer list */
ARM GAS  /tmp/cc7VB9gc.s 			page 5


 116:rt_thread/src/thread.c ****     rt_timer_detach(&thread->thread_timer);
 117              		.loc 1 116 5 is_stmt 1 view .LVU26
 118 001e 04F14400 		add	r0, r4, #68
 119 0022 FFF7FEFF 		bl	rt_timer_detach
 120              	.LVL12:
 117:rt_thread/src/thread.c **** 
 118:rt_thread/src/thread.c ****     if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 121              		.loc 1 118 5 view .LVU27
 122              		.loc 1 118 9 is_stmt 0 view .LVU28
 123 0026 2046     		mov	r0, r4
 124 0028 FFF7FEFF 		bl	rt_object_is_systemobject
 125              	.LVL13:
 126              		.loc 1 118 8 view .LVU29
 127 002c 0128     		cmp	r0, #1
 128 002e 0DD0     		beq	.L8
 119:rt_thread/src/thread.c ****     {
 120:rt_thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 121:rt_thread/src/thread.c ****     }
 122:rt_thread/src/thread.c ****     else
 123:rt_thread/src/thread.c ****     {
 124:rt_thread/src/thread.c ****         /* insert to defunct thread list */
 125:rt_thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 129              		.loc 1 125 9 is_stmt 1 view .LVU30
 130 0030 04F11402 		add	r2, r4, #20
 131              	.LVL14:
 132              	.LBB18:
 133              	.LBI18:
 134              		.file 2 "rt_thread/include/rtservice.h"
   1:rt_thread/include/rtservice.h **** /*
   2:rt_thread/include/rtservice.h ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rt_thread/include/rtservice.h ****  *
   4:rt_thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/include/rtservice.h ****  *
   6:rt_thread/include/rtservice.h ****  * Change Logs:
   7:rt_thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt_thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt_thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt_thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt_thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt_thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt_thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt_thread/include/rtservice.h ****  */
  15:rt_thread/include/rtservice.h **** 
  16:rt_thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt_thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt_thread/include/rtservice.h **** 
  19:rt_thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt_thread/include/rtservice.h **** extern "C" {
  21:rt_thread/include/rtservice.h **** #endif
  22:rt_thread/include/rtservice.h **** 
  23:rt_thread/include/rtservice.h **** /**
  24:rt_thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt_thread/include/rtservice.h ****  */
  26:rt_thread/include/rtservice.h **** 
  27:rt_thread/include/rtservice.h **** /**@{*/
  28:rt_thread/include/rtservice.h **** 
  29:rt_thread/include/rtservice.h **** /**
ARM GAS  /tmp/cc7VB9gc.s 			page 6


  30:rt_thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt_thread/include/rtservice.h ****  * struct type.
  32:rt_thread/include/rtservice.h ****  */
  33:rt_thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt_thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt_thread/include/rtservice.h **** 
  36:rt_thread/include/rtservice.h **** 
  37:rt_thread/include/rtservice.h **** /**
  38:rt_thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt_thread/include/rtservice.h ****  */
  40:rt_thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt_thread/include/rtservice.h **** 
  42:rt_thread/include/rtservice.h **** /**
  43:rt_thread/include/rtservice.h ****  * @brief initialize a list
  44:rt_thread/include/rtservice.h ****  *
  45:rt_thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt_thread/include/rtservice.h ****  */
  47:rt_thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt_thread/include/rtservice.h **** {
  49:rt_thread/include/rtservice.h ****     l->next = l->prev = l;
  50:rt_thread/include/rtservice.h **** }
  51:rt_thread/include/rtservice.h **** 
  52:rt_thread/include/rtservice.h **** /**
  53:rt_thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt_thread/include/rtservice.h ****  *
  55:rt_thread/include/rtservice.h ****  * @param l list to insert it
  56:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt_thread/include/rtservice.h ****  */
  58:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
 135              		.loc 2 58 16 view .LVU31
 136              	.LBB19:
  59:rt_thread/include/rtservice.h **** {
  60:rt_thread/include/rtservice.h ****     l->next->prev = n;
 137              		.loc 2 60 5 view .LVU32
 138              		.loc 2 60 6 is_stmt 0 view .LVU33
 139 0034 084B     		ldr	r3, .L9+4
 140 0036 1968     		ldr	r1, [r3]
 141              		.loc 2 60 19 view .LVU34
 142 0038 4A60     		str	r2, [r1, #4]
  61:rt_thread/include/rtservice.h ****     n->next = l->next;
 143              		.loc 2 61 5 is_stmt 1 view .LVU35
 144              		.loc 2 61 13 is_stmt 0 view .LVU36
 145 003a 6161     		str	r1, [r4, #20]
  62:rt_thread/include/rtservice.h **** 
  63:rt_thread/include/rtservice.h ****     l->next = n;
 146              		.loc 2 63 5 is_stmt 1 view .LVU37
 147              		.loc 2 63 13 is_stmt 0 view .LVU38
 148 003c 1A60     		str	r2, [r3]
  64:rt_thread/include/rtservice.h ****     n->prev = l;
 149              		.loc 2 64 5 is_stmt 1 view .LVU39
 150              		.loc 2 64 13 is_stmt 0 view .LVU40
 151 003e A361     		str	r3, [r4, #24]
 152              	.LVL15:
 153              	.L6:
 154              		.loc 2 64 13 view .LVU41
 155              	.LBE19:
 156              	.LBE18:
ARM GAS  /tmp/cc7VB9gc.s 			page 7


 126:rt_thread/src/thread.c ****     }
 127:rt_thread/src/thread.c **** 
 128:rt_thread/src/thread.c ****     /* switch to next task */
 129:rt_thread/src/thread.c ****     rt_schedule();
 157              		.loc 1 129 5 is_stmt 1 view .LVU42
 158 0040 FFF7FEFF 		bl	rt_schedule
 159              	.LVL16:
 130:rt_thread/src/thread.c **** 
 131:rt_thread/src/thread.c ****     /* enable interrupt */
 132:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(level);
 160              		.loc 1 132 5 view .LVU43
 161 0044 2846     		mov	r0, r5
 162 0046 FFF7FEFF 		bl	rt_hw_interrupt_enable
 163              	.LVL17:
 133:rt_thread/src/thread.c **** }
 164              		.loc 1 133 1 is_stmt 0 view .LVU44
 165 004a 38BD     		pop	{r3, r4, r5, pc}
 166              	.LVL18:
 167              	.L8:
 120:rt_thread/src/thread.c ****     }
 168              		.loc 1 120 9 is_stmt 1 view .LVU45
 169 004c 2046     		mov	r0, r4
 170 004e FFF7FEFF 		bl	rt_object_detach
 171              	.LVL19:
 172 0052 F5E7     		b	.L6
 173              	.L10:
 174              		.align	2
 175              	.L9:
 176 0054 00000000 		.word	rt_current_thread
 177 0058 00000000 		.word	rt_thread_defunct
 178              		.cfi_endproc
 179              	.LFE16:
 181              		.section	.text._rt_thread_init,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	_rt_thread_init:
 188              	.LVL20:
 189              	.LFB17:
 134:rt_thread/src/thread.c **** 
 135:rt_thread/src/thread.c **** static rt_err_t _rt_thread_init(struct rt_thread *thread,
 136:rt_thread/src/thread.c ****                                 const char       *name,
 137:rt_thread/src/thread.c ****                                 void (*entry)(void *parameter),
 138:rt_thread/src/thread.c ****                                 void             *parameter,
 139:rt_thread/src/thread.c ****                                 void             *stack_start,
 140:rt_thread/src/thread.c ****                                 rt_uint32_t       stack_size,
 141:rt_thread/src/thread.c ****                                 rt_uint8_t        priority,
 142:rt_thread/src/thread.c ****                                 rt_uint32_t       tick)
 143:rt_thread/src/thread.c **** {
 190              		.loc 1 143 1 view -0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 143 1 is_stmt 0 view .LVU47
 195 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 196              	.LCFI2:
ARM GAS  /tmp/cc7VB9gc.s 			page 8


 197              		.cfi_def_cfa_offset 20
 198              		.cfi_offset 4, -20
 199              		.cfi_offset 5, -16
 200              		.cfi_offset 6, -12
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203 0002 83B0     		sub	sp, sp, #12
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 32
 206 0004 0446     		mov	r4, r0
 207 0006 1746     		mov	r7, r2
 208 0008 0898     		ldr	r0, [sp, #32]
 209              	.LVL21:
 210              		.loc 1 143 1 view .LVU48
 211 000a 099A     		ldr	r2, [sp, #36]
 212              	.LVL22:
 213              		.loc 1 143 1 view .LVU49
 214 000c 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
 215 0010 0B9E     		ldr	r6, [sp, #44]
 144:rt_thread/src/thread.c ****     /* init thread list */
 145:rt_thread/src/thread.c ****     rt_list_init(&(thread->tlist));
 216              		.loc 1 145 5 is_stmt 1 view .LVU50
 217 0012 04F11401 		add	r1, r4, #20
 218              	.LVL23:
 219              	.LBB20:
 220              	.LBI20:
  47:rt_thread/include/rtservice.h **** {
 221              		.loc 2 47 16 view .LVU51
 222              	.LBB21:
  49:rt_thread/include/rtservice.h **** }
 223              		.loc 2 49 5 view .LVU52
  49:rt_thread/include/rtservice.h **** }
 224              		.loc 2 49 23 is_stmt 0 view .LVU53
 225 0016 A161     		str	r1, [r4, #24]
  49:rt_thread/include/rtservice.h **** }
 226              		.loc 2 49 13 view .LVU54
 227 0018 6161     		str	r1, [r4, #20]
 228              	.LVL24:
  49:rt_thread/include/rtservice.h **** }
 229              		.loc 2 49 13 view .LVU55
 230              	.LBE21:
 231              	.LBE20:
 146:rt_thread/src/thread.c **** 
 147:rt_thread/src/thread.c ****     thread->entry = (void *)entry;
 232              		.loc 1 147 5 is_stmt 1 view .LVU56
 233              		.loc 1 147 19 is_stmt 0 view .LVU57
 234 001a 2762     		str	r7, [r4, #32]
 148:rt_thread/src/thread.c ****     thread->parameter = parameter;
 235              		.loc 1 148 5 is_stmt 1 view .LVU58
 236              		.loc 1 148 23 is_stmt 0 view .LVU59
 237 001c 6362     		str	r3, [r4, #36]
 149:rt_thread/src/thread.c **** 
 150:rt_thread/src/thread.c ****     /* stack init */
 151:rt_thread/src/thread.c ****     thread->stack_addr = stack_start;
 238              		.loc 1 151 5 is_stmt 1 view .LVU60
 239              		.loc 1 151 24 is_stmt 0 view .LVU61
 240 001e A062     		str	r0, [r4, #40]
ARM GAS  /tmp/cc7VB9gc.s 			page 9


 152:rt_thread/src/thread.c ****     thread->stack_size = stack_size;
 241              		.loc 1 152 5 is_stmt 1 view .LVU62
 242              		.loc 1 152 24 is_stmt 0 view .LVU63
 243 0020 E262     		str	r2, [r4, #44]
 153:rt_thread/src/thread.c **** 
 154:rt_thread/src/thread.c ****     /* init thread stack */
 155:rt_thread/src/thread.c ****     rt_memset(thread->stack_addr, '#', thread->stack_size);
 244              		.loc 1 155 5 is_stmt 1 view .LVU64
 245 0022 2321     		movs	r1, #35
 246 0024 FFF7FEFF 		bl	rt_memset
 247              	.LVL25:
 156:rt_thread/src/thread.c **** #ifdef ARCH_CPU_STACK_GROWS_UPWARD
 157:rt_thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 158:rt_thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr),
 159:rt_thread/src/thread.c ****                                           (void *)rt_thread_exit);
 160:rt_thread/src/thread.c **** #else
 161:rt_thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 248              		.loc 1 161 5 view .LVU65
 162:rt_thread/src/thread.c ****                                           (rt_uint8_t *)((char *)thread->stack_addr + thread->stack
 249              		.loc 1 162 72 is_stmt 0 view .LVU66
 250 0028 A16A     		ldr	r1, [r4, #40]
 251              		.loc 1 162 93 view .LVU67
 252 002a E36A     		ldr	r3, [r4, #44]
 253              		.loc 1 162 106 view .LVU68
 254 002c 1A1F     		subs	r2, r3, #4
 161:rt_thread/src/thread.c ****                                           (rt_uint8_t *)((char *)thread->stack_addr + thread->stack
 255              		.loc 1 161 26 view .LVU69
 256 002e 104B     		ldr	r3, .L13
 257 0030 0A44     		add	r2, r2, r1
 258 0032 616A     		ldr	r1, [r4, #36]
 259 0034 206A     		ldr	r0, [r4, #32]
 260 0036 FFF7FEFF 		bl	rt_hw_stack_init
 261              	.LVL26:
 161:rt_thread/src/thread.c ****                                           (rt_uint8_t *)((char *)thread->stack_addr + thread->stack
 262              		.loc 1 161 16 view .LVU70
 263 003a E061     		str	r0, [r4, #28]
 163:rt_thread/src/thread.c ****                                           (void *)rt_thread_exit);
 164:rt_thread/src/thread.c **** #endif
 165:rt_thread/src/thread.c **** 
 166:rt_thread/src/thread.c ****     /* priority init */
 167:rt_thread/src/thread.c ****     RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
 264              		.loc 1 167 49 is_stmt 1 view .LVU71
 168:rt_thread/src/thread.c ****     thread->init_priority    = priority;
 265              		.loc 1 168 5 view .LVU72
 266              		.loc 1 168 30 is_stmt 0 view .LVU73
 267 003c 84F83650 		strb	r5, [r4, #54]
 169:rt_thread/src/thread.c ****     thread->current_priority = priority;
 268              		.loc 1 169 5 is_stmt 1 view .LVU74
 269              		.loc 1 169 30 is_stmt 0 view .LVU75
 270 0040 84F83550 		strb	r5, [r4, #53]
 170:rt_thread/src/thread.c **** 
 171:rt_thread/src/thread.c ****     thread->number_mask = 0;
 271              		.loc 1 171 5 is_stmt 1 view .LVU76
 272              		.loc 1 171 25 is_stmt 0 view .LVU77
 273 0044 0025     		movs	r5, #0
 274 0046 A563     		str	r5, [r4, #56]
 172:rt_thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
ARM GAS  /tmp/cc7VB9gc.s 			page 10


 173:rt_thread/src/thread.c ****     thread->number = 0;
 174:rt_thread/src/thread.c ****     thread->high_mask = 0;
 175:rt_thread/src/thread.c **** #endif
 176:rt_thread/src/thread.c **** 
 177:rt_thread/src/thread.c ****     /* tick init */
 178:rt_thread/src/thread.c ****     thread->init_tick      = tick;
 275              		.loc 1 178 5 is_stmt 1 view .LVU78
 276              		.loc 1 178 28 is_stmt 0 view .LVU79
 277 0048 E663     		str	r6, [r4, #60]
 179:rt_thread/src/thread.c ****     thread->remaining_tick = tick;
 278              		.loc 1 179 5 is_stmt 1 view .LVU80
 279              		.loc 1 179 28 is_stmt 0 view .LVU81
 280 004a 2664     		str	r6, [r4, #64]
 180:rt_thread/src/thread.c **** 
 181:rt_thread/src/thread.c ****     /* error and flags */
 182:rt_thread/src/thread.c ****     thread->error = RT_EOK;
 281              		.loc 1 182 5 is_stmt 1 view .LVU82
 282              		.loc 1 182 19 is_stmt 0 view .LVU83
 283 004c 2563     		str	r5, [r4, #48]
 183:rt_thread/src/thread.c ****     thread->stat  = RT_THREAD_INIT;
 284              		.loc 1 183 5 is_stmt 1 view .LVU84
 285              		.loc 1 183 19 is_stmt 0 view .LVU85
 286 004e 84F83450 		strb	r5, [r4, #52]
 184:rt_thread/src/thread.c **** 
 185:rt_thread/src/thread.c ****     /* initialize cleanup function and user data */
 186:rt_thread/src/thread.c ****     thread->cleanup   = 0;
 287              		.loc 1 186 5 is_stmt 1 view .LVU86
 288              		.loc 1 186 23 is_stmt 0 view .LVU87
 289 0052 2567     		str	r5, [r4, #112]
 187:rt_thread/src/thread.c ****     thread->user_data = 0;
 290              		.loc 1 187 5 is_stmt 1 view .LVU88
 291              		.loc 1 187 23 is_stmt 0 view .LVU89
 292 0054 6567     		str	r5, [r4, #116]
 188:rt_thread/src/thread.c **** 
 189:rt_thread/src/thread.c ****     /* initialize thread timer */
 190:rt_thread/src/thread.c ****     rt_timer_init(&(thread->thread_timer),
 293              		.loc 1 190 5 is_stmt 1 view .LVU90
 294 0056 0195     		str	r5, [sp, #4]
 295 0058 0095     		str	r5, [sp]
 296 005a 2346     		mov	r3, r4
 297 005c 054A     		ldr	r2, .L13+4
 298 005e 2146     		mov	r1, r4
 299 0060 04F14400 		add	r0, r4, #68
 300 0064 FFF7FEFF 		bl	rt_timer_init
 301              	.LVL27:
 191:rt_thread/src/thread.c ****                   thread->name,
 192:rt_thread/src/thread.c ****                   rt_thread_timeout,
 193:rt_thread/src/thread.c ****                   thread,
 194:rt_thread/src/thread.c ****                   0,
 195:rt_thread/src/thread.c ****                   RT_TIMER_FLAG_ONE_SHOT);
 196:rt_thread/src/thread.c **** 
 197:rt_thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
 302              		.loc 1 197 57 view .LVU91
 198:rt_thread/src/thread.c **** 
 199:rt_thread/src/thread.c ****     return RT_EOK;
 303              		.loc 1 199 5 view .LVU92
 200:rt_thread/src/thread.c **** }
ARM GAS  /tmp/cc7VB9gc.s 			page 11


 304              		.loc 1 200 1 is_stmt 0 view .LVU93
 305 0068 2846     		mov	r0, r5
 306 006a 03B0     		add	sp, sp, #12
 307              	.LCFI4:
 308              		.cfi_def_cfa_offset 20
 309              		@ sp needed
 310 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 311              	.LVL28:
 312              	.L14:
 313              		.loc 1 200 1 view .LVU94
 314 006e 00BF     		.align	2
 315              	.L13:
 316 0070 00000000 		.word	rt_thread_exit
 317 0074 00000000 		.word	rt_thread_timeout
 318              		.cfi_endproc
 319              	.LFE17:
 321              		.section	.text.rt_thread_timeout,"ax",%progbits
 322              		.align	1
 323              		.global	rt_thread_timeout
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 328              	rt_thread_timeout:
 329              	.LVL29:
 330              	.LFB32:
 201:rt_thread/src/thread.c **** 
 202:rt_thread/src/thread.c **** /**
 203:rt_thread/src/thread.c ****  * @addtogroup Thread
 204:rt_thread/src/thread.c ****  */
 205:rt_thread/src/thread.c **** 
 206:rt_thread/src/thread.c **** /**@{*/
 207:rt_thread/src/thread.c **** 
 208:rt_thread/src/thread.c **** /**
 209:rt_thread/src/thread.c ****  * This function will initialize a thread, normally it's used to initialize a
 210:rt_thread/src/thread.c ****  * static thread object.
 211:rt_thread/src/thread.c ****  *
 212:rt_thread/src/thread.c ****  * @param thread the static thread object
 213:rt_thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 214:rt_thread/src/thread.c ****  * @param entry the entry function of thread
 215:rt_thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 216:rt_thread/src/thread.c ****  * @param stack_start the start address of thread stack
 217:rt_thread/src/thread.c ****  * @param stack_size the size of thread stack
 218:rt_thread/src/thread.c ****  * @param priority the priority of thread
 219:rt_thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 220:rt_thread/src/thread.c ****  *
 221:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 222:rt_thread/src/thread.c ****  */
 223:rt_thread/src/thread.c **** rt_err_t rt_thread_init(struct rt_thread *thread,
 224:rt_thread/src/thread.c ****                         const char       *name,
 225:rt_thread/src/thread.c ****                         void (*entry)(void *parameter),
 226:rt_thread/src/thread.c ****                         void             *parameter,
 227:rt_thread/src/thread.c ****                         void             *stack_start,
 228:rt_thread/src/thread.c ****                         rt_uint32_t       stack_size,
 229:rt_thread/src/thread.c ****                         rt_uint8_t        priority,
 230:rt_thread/src/thread.c ****                         rt_uint32_t       tick)
 231:rt_thread/src/thread.c **** {
 232:rt_thread/src/thread.c ****     /* thread check */
ARM GAS  /tmp/cc7VB9gc.s 			page 12


 233:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 234:rt_thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 235:rt_thread/src/thread.c **** 
 236:rt_thread/src/thread.c ****     /* initialize thread object */
 237:rt_thread/src/thread.c ****     rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
 238:rt_thread/src/thread.c **** 
 239:rt_thread/src/thread.c ****     return _rt_thread_init(thread,
 240:rt_thread/src/thread.c ****                            name,
 241:rt_thread/src/thread.c ****                            entry,
 242:rt_thread/src/thread.c ****                            parameter,
 243:rt_thread/src/thread.c ****                            stack_start,
 244:rt_thread/src/thread.c ****                            stack_size,
 245:rt_thread/src/thread.c ****                            priority,
 246:rt_thread/src/thread.c ****                            tick);
 247:rt_thread/src/thread.c **** }
 248:rt_thread/src/thread.c **** 
 249:rt_thread/src/thread.c **** /**
 250:rt_thread/src/thread.c ****  * This function will return self thread object
 251:rt_thread/src/thread.c ****  *
 252:rt_thread/src/thread.c ****  * @return the self thread object
 253:rt_thread/src/thread.c ****  */
 254:rt_thread/src/thread.c **** rt_thread_t rt_thread_self(void)
 255:rt_thread/src/thread.c **** {
 256:rt_thread/src/thread.c ****     return rt_current_thread;
 257:rt_thread/src/thread.c **** }
 258:rt_thread/src/thread.c **** 
 259:rt_thread/src/thread.c **** /**
 260:rt_thread/src/thread.c ****  * This function will start a thread and put it to system ready queue
 261:rt_thread/src/thread.c ****  *
 262:rt_thread/src/thread.c ****  * @param thread the thread to be started
 263:rt_thread/src/thread.c ****  *
 264:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 265:rt_thread/src/thread.c ****  */
 266:rt_thread/src/thread.c **** rt_err_t rt_thread_startup(rt_thread_t thread)
 267:rt_thread/src/thread.c **** {
 268:rt_thread/src/thread.c ****     /* thread check */
 269:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 270:rt_thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 271:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 272:rt_thread/src/thread.c **** 
 273:rt_thread/src/thread.c ****     /* set current priority to initialize priority */
 274:rt_thread/src/thread.c ****     thread->current_priority = thread->init_priority;
 275:rt_thread/src/thread.c **** 
 276:rt_thread/src/thread.c ****     /* calculate priority attribute */
 277:rt_thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 278:rt_thread/src/thread.c ****     thread->number      = thread->current_priority >> 3;            /* 5bit */
 279:rt_thread/src/thread.c ****     thread->number_mask = 1L << thread->number;
 280:rt_thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 281:rt_thread/src/thread.c **** #else
 282:rt_thread/src/thread.c ****     thread->number_mask = 1L << thread->current_priority;
 283:rt_thread/src/thread.c **** #endif
 284:rt_thread/src/thread.c **** 
 285:rt_thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
 286:rt_thread/src/thread.c ****                                    thread->name, thread->init_priority));
 287:rt_thread/src/thread.c ****     /* change thread stat */
 288:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND;
 289:rt_thread/src/thread.c ****     /* then resume it */
ARM GAS  /tmp/cc7VB9gc.s 			page 13


 290:rt_thread/src/thread.c ****     rt_thread_resume(thread);
 291:rt_thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 292:rt_thread/src/thread.c ****     {
 293:rt_thread/src/thread.c ****         /* do a scheduling */
 294:rt_thread/src/thread.c ****         rt_schedule();
 295:rt_thread/src/thread.c ****     }
 296:rt_thread/src/thread.c **** 
 297:rt_thread/src/thread.c ****     return RT_EOK;
 298:rt_thread/src/thread.c **** }
 299:rt_thread/src/thread.c **** 
 300:rt_thread/src/thread.c **** /**
 301:rt_thread/src/thread.c ****  * This function will detach a thread. The thread object will be removed from
 302:rt_thread/src/thread.c ****  * thread queue and detached/deleted from system object management.
 303:rt_thread/src/thread.c ****  *
 304:rt_thread/src/thread.c ****  * @param thread the thread to be deleted
 305:rt_thread/src/thread.c ****  *
 306:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 307:rt_thread/src/thread.c ****  */
 308:rt_thread/src/thread.c **** rt_err_t rt_thread_detach(rt_thread_t thread)
 309:rt_thread/src/thread.c **** {
 310:rt_thread/src/thread.c ****     rt_base_t lock;
 311:rt_thread/src/thread.c **** 
 312:rt_thread/src/thread.c ****     /* thread check */
 313:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 314:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 315:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 316:rt_thread/src/thread.c **** 
 317:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
 318:rt_thread/src/thread.c ****         return RT_EOK;
 319:rt_thread/src/thread.c **** 
 320:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 321:rt_thread/src/thread.c ****     {
 322:rt_thread/src/thread.c ****         /* remove from schedule */
 323:rt_thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 324:rt_thread/src/thread.c ****     }
 325:rt_thread/src/thread.c **** 
 326:rt_thread/src/thread.c ****     _thread_cleanup_execute(thread);
 327:rt_thread/src/thread.c **** 
 328:rt_thread/src/thread.c ****     /* release thread timer */
 329:rt_thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 330:rt_thread/src/thread.c **** 
 331:rt_thread/src/thread.c ****     /* change stat */
 332:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 333:rt_thread/src/thread.c **** 
 334:rt_thread/src/thread.c ****     if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 335:rt_thread/src/thread.c ****     {
 336:rt_thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 337:rt_thread/src/thread.c ****     }
 338:rt_thread/src/thread.c ****     else
 339:rt_thread/src/thread.c ****     {
 340:rt_thread/src/thread.c ****         /* disable interrupt */
 341:rt_thread/src/thread.c ****         lock = rt_hw_interrupt_disable();
 342:rt_thread/src/thread.c ****         /* insert to defunct thread list */
 343:rt_thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 344:rt_thread/src/thread.c ****         /* enable interrupt */
 345:rt_thread/src/thread.c ****         rt_hw_interrupt_enable(lock);
 346:rt_thread/src/thread.c ****     }
ARM GAS  /tmp/cc7VB9gc.s 			page 14


 347:rt_thread/src/thread.c **** 
 348:rt_thread/src/thread.c ****     return RT_EOK;
 349:rt_thread/src/thread.c **** }
 350:rt_thread/src/thread.c **** 
 351:rt_thread/src/thread.c **** #ifdef RT_USING_HEAP
 352:rt_thread/src/thread.c **** /**
 353:rt_thread/src/thread.c ****  * This function will create a thread object and allocate thread object memory
 354:rt_thread/src/thread.c ****  * and stack.
 355:rt_thread/src/thread.c ****  *
 356:rt_thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 357:rt_thread/src/thread.c ****  * @param entry the entry function of thread
 358:rt_thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 359:rt_thread/src/thread.c ****  * @param stack_size the size of thread stack
 360:rt_thread/src/thread.c ****  * @param priority the priority of thread
 361:rt_thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 362:rt_thread/src/thread.c ****  *
 363:rt_thread/src/thread.c ****  * @return the created thread object
 364:rt_thread/src/thread.c ****  */
 365:rt_thread/src/thread.c **** rt_thread_t rt_thread_create(const char *name,
 366:rt_thread/src/thread.c ****                              void (*entry)(void *parameter),
 367:rt_thread/src/thread.c ****                              void       *parameter,
 368:rt_thread/src/thread.c ****                              rt_uint32_t stack_size,
 369:rt_thread/src/thread.c ****                              rt_uint8_t  priority,
 370:rt_thread/src/thread.c ****                              rt_uint32_t tick)
 371:rt_thread/src/thread.c **** {
 372:rt_thread/src/thread.c ****     struct rt_thread *thread;
 373:rt_thread/src/thread.c ****     void *stack_start;
 374:rt_thread/src/thread.c **** 
 375:rt_thread/src/thread.c ****     thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
 376:rt_thread/src/thread.c ****                                                     name);
 377:rt_thread/src/thread.c ****     if (thread == RT_NULL)
 378:rt_thread/src/thread.c ****         return RT_NULL;
 379:rt_thread/src/thread.c **** 
 380:rt_thread/src/thread.c ****     stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
 381:rt_thread/src/thread.c ****     if (stack_start == RT_NULL)
 382:rt_thread/src/thread.c ****     {
 383:rt_thread/src/thread.c ****         /* allocate stack failure */
 384:rt_thread/src/thread.c ****         rt_object_delete((rt_object_t)thread);
 385:rt_thread/src/thread.c **** 
 386:rt_thread/src/thread.c ****         return RT_NULL;
 387:rt_thread/src/thread.c ****     }
 388:rt_thread/src/thread.c **** 
 389:rt_thread/src/thread.c ****     _rt_thread_init(thread,
 390:rt_thread/src/thread.c ****                     name,
 391:rt_thread/src/thread.c ****                     entry,
 392:rt_thread/src/thread.c ****                     parameter,
 393:rt_thread/src/thread.c ****                     stack_start,
 394:rt_thread/src/thread.c ****                     stack_size,
 395:rt_thread/src/thread.c ****                     priority,
 396:rt_thread/src/thread.c ****                     tick);
 397:rt_thread/src/thread.c **** 
 398:rt_thread/src/thread.c ****     return thread;
 399:rt_thread/src/thread.c **** }
 400:rt_thread/src/thread.c **** 
 401:rt_thread/src/thread.c **** /**
 402:rt_thread/src/thread.c ****  * This function will delete a thread. The thread object will be removed from
 403:rt_thread/src/thread.c ****  * thread queue and deleted from system object management in the idle thread.
ARM GAS  /tmp/cc7VB9gc.s 			page 15


 404:rt_thread/src/thread.c ****  *
 405:rt_thread/src/thread.c ****  * @param thread the thread to be deleted
 406:rt_thread/src/thread.c ****  *
 407:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 408:rt_thread/src/thread.c ****  */
 409:rt_thread/src/thread.c **** rt_err_t rt_thread_delete(rt_thread_t thread)
 410:rt_thread/src/thread.c **** {
 411:rt_thread/src/thread.c ****     rt_base_t lock;
 412:rt_thread/src/thread.c **** 
 413:rt_thread/src/thread.c ****     /* thread check */
 414:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 415:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 416:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 417:rt_thread/src/thread.c **** 
 418:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
 419:rt_thread/src/thread.c ****         return RT_EOK;
 420:rt_thread/src/thread.c **** 
 421:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 422:rt_thread/src/thread.c ****     {
 423:rt_thread/src/thread.c ****         /* remove from schedule */
 424:rt_thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 425:rt_thread/src/thread.c ****     }
 426:rt_thread/src/thread.c **** 
 427:rt_thread/src/thread.c ****     _thread_cleanup_execute(thread);
 428:rt_thread/src/thread.c **** 
 429:rt_thread/src/thread.c ****     /* release thread timer */
 430:rt_thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 431:rt_thread/src/thread.c **** 
 432:rt_thread/src/thread.c ****     /* disable interrupt */
 433:rt_thread/src/thread.c ****     lock = rt_hw_interrupt_disable();
 434:rt_thread/src/thread.c **** 
 435:rt_thread/src/thread.c ****     /* change stat */
 436:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 437:rt_thread/src/thread.c **** 
 438:rt_thread/src/thread.c ****     /* insert to defunct thread list */
 439:rt_thread/src/thread.c ****     rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 440:rt_thread/src/thread.c **** 
 441:rt_thread/src/thread.c ****     /* enable interrupt */
 442:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(lock);
 443:rt_thread/src/thread.c **** 
 444:rt_thread/src/thread.c ****     return RT_EOK;
 445:rt_thread/src/thread.c **** }
 446:rt_thread/src/thread.c **** #endif
 447:rt_thread/src/thread.c **** 
 448:rt_thread/src/thread.c **** /**
 449:rt_thread/src/thread.c ****  * This function will let current thread yield processor, and scheduler will
 450:rt_thread/src/thread.c ****  * choose a highest thread to run. After yield processor, the current thread
 451:rt_thread/src/thread.c ****  * is still in READY state.
 452:rt_thread/src/thread.c ****  *
 453:rt_thread/src/thread.c ****  * @return RT_EOK
 454:rt_thread/src/thread.c ****  */
 455:rt_thread/src/thread.c **** rt_err_t rt_thread_yield(void)
 456:rt_thread/src/thread.c **** {
 457:rt_thread/src/thread.c ****     register rt_base_t level;
 458:rt_thread/src/thread.c ****     struct rt_thread *thread;
 459:rt_thread/src/thread.c **** 
 460:rt_thread/src/thread.c ****     /* disable interrupt */
ARM GAS  /tmp/cc7VB9gc.s 			page 16


 461:rt_thread/src/thread.c ****     level = rt_hw_interrupt_disable();
 462:rt_thread/src/thread.c **** 
 463:rt_thread/src/thread.c ****     /* set to current thread */
 464:rt_thread/src/thread.c ****     thread = rt_current_thread;
 465:rt_thread/src/thread.c **** 
 466:rt_thread/src/thread.c ****     /* if the thread stat is READY and on ready queue list */
 467:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
 468:rt_thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 469:rt_thread/src/thread.c ****     {
 470:rt_thread/src/thread.c ****         /* remove thread from thread list */
 471:rt_thread/src/thread.c ****         rt_list_remove(&(thread->tlist));
 472:rt_thread/src/thread.c **** 
 473:rt_thread/src/thread.c ****         /* put thread to end of ready queue */
 474:rt_thread/src/thread.c ****         rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 475:rt_thread/src/thread.c ****                               &(thread->tlist));
 476:rt_thread/src/thread.c **** 
 477:rt_thread/src/thread.c ****         /* enable interrupt */
 478:rt_thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 479:rt_thread/src/thread.c **** 
 480:rt_thread/src/thread.c ****         rt_schedule();
 481:rt_thread/src/thread.c **** 
 482:rt_thread/src/thread.c ****         return RT_EOK;
 483:rt_thread/src/thread.c ****     }
 484:rt_thread/src/thread.c **** 
 485:rt_thread/src/thread.c ****     /* enable interrupt */
 486:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(level);
 487:rt_thread/src/thread.c **** 
 488:rt_thread/src/thread.c ****     return RT_EOK;
 489:rt_thread/src/thread.c **** }
 490:rt_thread/src/thread.c **** 
 491:rt_thread/src/thread.c **** /**
 492:rt_thread/src/thread.c ****  * This function will let current thread sleep for some ticks.
 493:rt_thread/src/thread.c ****  *
 494:rt_thread/src/thread.c ****  * @param tick the sleep ticks
 495:rt_thread/src/thread.c ****  *
 496:rt_thread/src/thread.c ****  * @return RT_EOK
 497:rt_thread/src/thread.c ****  */
 498:rt_thread/src/thread.c **** rt_err_t rt_thread_sleep(rt_tick_t tick)
 499:rt_thread/src/thread.c **** {
 500:rt_thread/src/thread.c ****     register rt_base_t temp;
 501:rt_thread/src/thread.c ****     struct rt_thread *thread;
 502:rt_thread/src/thread.c **** 
 503:rt_thread/src/thread.c ****     /* disable interrupt */
 504:rt_thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 505:rt_thread/src/thread.c ****     /* set to current thread */
 506:rt_thread/src/thread.c ****     thread = rt_current_thread;
 507:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 508:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 509:rt_thread/src/thread.c **** 
 510:rt_thread/src/thread.c ****     /* suspend thread */
 511:rt_thread/src/thread.c ****     rt_thread_suspend(thread);
 512:rt_thread/src/thread.c **** 
 513:rt_thread/src/thread.c ****     /* reset the timeout of thread timer and start it */
 514:rt_thread/src/thread.c ****     rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
 515:rt_thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 516:rt_thread/src/thread.c **** 
 517:rt_thread/src/thread.c ****     /* enable interrupt */
ARM GAS  /tmp/cc7VB9gc.s 			page 17


 518:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 519:rt_thread/src/thread.c **** 
 520:rt_thread/src/thread.c ****     rt_schedule();
 521:rt_thread/src/thread.c **** 
 522:rt_thread/src/thread.c ****     /* clear error number of this thread to RT_EOK */
 523:rt_thread/src/thread.c ****     if (thread->error == -RT_ETIMEOUT)
 524:rt_thread/src/thread.c ****         thread->error = RT_EOK;
 525:rt_thread/src/thread.c **** 
 526:rt_thread/src/thread.c ****     return RT_EOK;
 527:rt_thread/src/thread.c **** }
 528:rt_thread/src/thread.c **** 
 529:rt_thread/src/thread.c **** /**
 530:rt_thread/src/thread.c ****  * This function will let current thread delay for some ticks.
 531:rt_thread/src/thread.c ****  *
 532:rt_thread/src/thread.c ****  * @param tick the delay ticks
 533:rt_thread/src/thread.c ****  *
 534:rt_thread/src/thread.c ****  * @return RT_EOK
 535:rt_thread/src/thread.c ****  */
 536:rt_thread/src/thread.c **** rt_err_t rt_thread_delay(rt_tick_t tick)
 537:rt_thread/src/thread.c **** {
 538:rt_thread/src/thread.c ****     return rt_thread_sleep(tick);
 539:rt_thread/src/thread.c **** }
 540:rt_thread/src/thread.c **** 
 541:rt_thread/src/thread.c **** /**
 542:rt_thread/src/thread.c ****  * This function will let current thread delay until (*tick + inc_tick).
 543:rt_thread/src/thread.c ****  *
 544:rt_thread/src/thread.c ****  * @param tick the tick of last wakeup.
 545:rt_thread/src/thread.c ****  * @param inc_tick the increment tick
 546:rt_thread/src/thread.c ****  *
 547:rt_thread/src/thread.c ****  * @return RT_EOK
 548:rt_thread/src/thread.c ****  */
 549:rt_thread/src/thread.c **** rt_err_t rt_thread_delay_until(rt_tick_t *tick, rt_tick_t inc_tick)
 550:rt_thread/src/thread.c **** {
 551:rt_thread/src/thread.c ****     register rt_base_t level;
 552:rt_thread/src/thread.c ****     struct rt_thread *thread;
 553:rt_thread/src/thread.c **** 
 554:rt_thread/src/thread.c ****     RT_ASSERT(tick != RT_NULL);
 555:rt_thread/src/thread.c **** 
 556:rt_thread/src/thread.c ****     /* set to current thread */
 557:rt_thread/src/thread.c ****     thread = rt_thread_self();
 558:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 559:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 560:rt_thread/src/thread.c **** 
 561:rt_thread/src/thread.c ****     /* disable interrupt */
 562:rt_thread/src/thread.c ****     level = rt_hw_interrupt_disable();
 563:rt_thread/src/thread.c **** 
 564:rt_thread/src/thread.c ****     if (rt_tick_get() - *tick < inc_tick)
 565:rt_thread/src/thread.c ****     {
 566:rt_thread/src/thread.c ****         *tick = *tick + inc_tick - rt_tick_get();
 567:rt_thread/src/thread.c **** 
 568:rt_thread/src/thread.c ****         /* suspend thread */
 569:rt_thread/src/thread.c ****         rt_thread_suspend(thread);
 570:rt_thread/src/thread.c **** 
 571:rt_thread/src/thread.c ****         /* reset the timeout of thread timer and start it */
 572:rt_thread/src/thread.c ****         rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, tick);
 573:rt_thread/src/thread.c ****         rt_timer_start(&(thread->thread_timer));
 574:rt_thread/src/thread.c **** 
ARM GAS  /tmp/cc7VB9gc.s 			page 18


 575:rt_thread/src/thread.c ****         /* enable interrupt */
 576:rt_thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 577:rt_thread/src/thread.c **** 
 578:rt_thread/src/thread.c ****         rt_schedule();
 579:rt_thread/src/thread.c **** 
 580:rt_thread/src/thread.c ****         /* clear error number of this thread to RT_EOK */
 581:rt_thread/src/thread.c ****         if (thread->error == -RT_ETIMEOUT)
 582:rt_thread/src/thread.c ****         {
 583:rt_thread/src/thread.c ****             thread->error = RT_EOK;
 584:rt_thread/src/thread.c ****         }
 585:rt_thread/src/thread.c ****     }
 586:rt_thread/src/thread.c ****     else
 587:rt_thread/src/thread.c ****     {
 588:rt_thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 589:rt_thread/src/thread.c ****     }
 590:rt_thread/src/thread.c **** 
 591:rt_thread/src/thread.c ****     /* get the wakeup tick */
 592:rt_thread/src/thread.c ****     *tick = rt_tick_get();
 593:rt_thread/src/thread.c **** 
 594:rt_thread/src/thread.c ****     return RT_EOK;
 595:rt_thread/src/thread.c **** }
 596:rt_thread/src/thread.c **** 
 597:rt_thread/src/thread.c **** /**
 598:rt_thread/src/thread.c ****  * This function will let current thread delay for some milliseconds.
 599:rt_thread/src/thread.c ****  *
 600:rt_thread/src/thread.c ****  * @param ms the delay ms time
 601:rt_thread/src/thread.c ****  *
 602:rt_thread/src/thread.c ****  * @return RT_EOK
 603:rt_thread/src/thread.c ****  */
 604:rt_thread/src/thread.c **** rt_err_t rt_thread_mdelay(rt_int32_t ms)
 605:rt_thread/src/thread.c **** {
 606:rt_thread/src/thread.c ****     rt_tick_t tick;
 607:rt_thread/src/thread.c **** 
 608:rt_thread/src/thread.c ****     tick = rt_tick_from_millisecond(ms);
 609:rt_thread/src/thread.c **** 
 610:rt_thread/src/thread.c ****     return rt_thread_sleep(tick);
 611:rt_thread/src/thread.c **** }
 612:rt_thread/src/thread.c **** 
 613:rt_thread/src/thread.c **** /**
 614:rt_thread/src/thread.c ****  * This function will control thread behaviors according to control command.
 615:rt_thread/src/thread.c ****  *
 616:rt_thread/src/thread.c ****  * @param thread the specified thread to be controlled
 617:rt_thread/src/thread.c ****  * @param cmd the control command, which includes
 618:rt_thread/src/thread.c ****  *  RT_THREAD_CTRL_CHANGE_PRIORITY for changing priority level of thread;
 619:rt_thread/src/thread.c ****  *  RT_THREAD_CTRL_STARTUP for starting a thread;
 620:rt_thread/src/thread.c ****  *  RT_THREAD_CTRL_CLOSE for delete a thread;
 621:rt_thread/src/thread.c ****  *  RT_THREAD_CTRL_BIND_CPU for bind the thread to a CPU.
 622:rt_thread/src/thread.c ****  * @param arg the argument of control command
 623:rt_thread/src/thread.c ****  *
 624:rt_thread/src/thread.c ****  * @return RT_EOK
 625:rt_thread/src/thread.c ****  */
 626:rt_thread/src/thread.c **** rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
 627:rt_thread/src/thread.c **** {
 628:rt_thread/src/thread.c ****     register rt_base_t temp;
 629:rt_thread/src/thread.c **** 
 630:rt_thread/src/thread.c ****     /* thread check */
 631:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
ARM GAS  /tmp/cc7VB9gc.s 			page 19


 632:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 633:rt_thread/src/thread.c **** 
 634:rt_thread/src/thread.c ****     switch (cmd)
 635:rt_thread/src/thread.c ****     {
 636:rt_thread/src/thread.c ****     case RT_THREAD_CTRL_CHANGE_PRIORITY:
 637:rt_thread/src/thread.c ****         /* disable interrupt */
 638:rt_thread/src/thread.c ****         temp = rt_hw_interrupt_disable();
 639:rt_thread/src/thread.c **** 
 640:rt_thread/src/thread.c ****         /* for ready thread, change queue */
 641:rt_thread/src/thread.c ****         if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
 642:rt_thread/src/thread.c ****         {
 643:rt_thread/src/thread.c ****             /* remove thread from schedule queue first */
 644:rt_thread/src/thread.c ****             rt_schedule_remove_thread(thread);
 645:rt_thread/src/thread.c **** 
 646:rt_thread/src/thread.c ****             /* change thread priority */
 647:rt_thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 648:rt_thread/src/thread.c **** 
 649:rt_thread/src/thread.c ****             /* recalculate priority attribute */
 650:rt_thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 651:rt_thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 652:rt_thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 653:rt_thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 654:rt_thread/src/thread.c **** #else
 655:rt_thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
 656:rt_thread/src/thread.c **** #endif
 657:rt_thread/src/thread.c **** 
 658:rt_thread/src/thread.c ****             /* insert thread to schedule queue again */
 659:rt_thread/src/thread.c ****             rt_schedule_insert_thread(thread);
 660:rt_thread/src/thread.c ****         }
 661:rt_thread/src/thread.c ****         else
 662:rt_thread/src/thread.c ****         {
 663:rt_thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 664:rt_thread/src/thread.c **** 
 665:rt_thread/src/thread.c ****             /* recalculate priority attribute */
 666:rt_thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 667:rt_thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 668:rt_thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 669:rt_thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 670:rt_thread/src/thread.c **** #else
 671:rt_thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
 672:rt_thread/src/thread.c **** #endif
 673:rt_thread/src/thread.c ****         }
 674:rt_thread/src/thread.c **** 
 675:rt_thread/src/thread.c ****         /* enable interrupt */
 676:rt_thread/src/thread.c ****         rt_hw_interrupt_enable(temp);
 677:rt_thread/src/thread.c ****         break;
 678:rt_thread/src/thread.c **** 
 679:rt_thread/src/thread.c ****     case RT_THREAD_CTRL_STARTUP:
 680:rt_thread/src/thread.c ****         return rt_thread_startup(thread);
 681:rt_thread/src/thread.c **** 
 682:rt_thread/src/thread.c ****     case RT_THREAD_CTRL_CLOSE:
 683:rt_thread/src/thread.c **** 
 684:rt_thread/src/thread.c ****         if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
 685:rt_thread/src/thread.c ****         {
 686:rt_thread/src/thread.c ****             return rt_thread_detach(thread);
 687:rt_thread/src/thread.c ****         }
 688:rt_thread/src/thread.c **** #ifdef RT_USING_HEAP
ARM GAS  /tmp/cc7VB9gc.s 			page 20


 689:rt_thread/src/thread.c ****         else
 690:rt_thread/src/thread.c ****         {
 691:rt_thread/src/thread.c ****             return rt_thread_delete(thread);
 692:rt_thread/src/thread.c ****         }
 693:rt_thread/src/thread.c **** #endif
 694:rt_thread/src/thread.c **** 
 695:rt_thread/src/thread.c ****     default:
 696:rt_thread/src/thread.c ****         break;
 697:rt_thread/src/thread.c ****     }
 698:rt_thread/src/thread.c **** 
 699:rt_thread/src/thread.c ****     return RT_EOK;
 700:rt_thread/src/thread.c **** }
 701:rt_thread/src/thread.c **** 
 702:rt_thread/src/thread.c **** /**
 703:rt_thread/src/thread.c ****  * This function will suspend the specified thread.
 704:rt_thread/src/thread.c ****  *
 705:rt_thread/src/thread.c ****  * @param thread the thread to be suspended
 706:rt_thread/src/thread.c ****  *
 707:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 708:rt_thread/src/thread.c ****  *
 709:rt_thread/src/thread.c ****  * @note if suspend self thread, after this function call, the
 710:rt_thread/src/thread.c ****  * rt_schedule() must be invoked.
 711:rt_thread/src/thread.c ****  */
 712:rt_thread/src/thread.c **** rt_err_t rt_thread_suspend(rt_thread_t thread)
 713:rt_thread/src/thread.c **** {
 714:rt_thread/src/thread.c ****     register rt_base_t temp;
 715:rt_thread/src/thread.c **** 
 716:rt_thread/src/thread.c ****     /* thread check */
 717:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 718:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 719:rt_thread/src/thread.c **** 
 720:rt_thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));
 721:rt_thread/src/thread.c **** 
 722:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
 723:rt_thread/src/thread.c ****     {
 724:rt_thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
 725:rt_thread/src/thread.c ****                                        thread->stat));
 726:rt_thread/src/thread.c **** 
 727:rt_thread/src/thread.c ****         return -RT_ERROR;
 728:rt_thread/src/thread.c ****     }
 729:rt_thread/src/thread.c **** 
 730:rt_thread/src/thread.c ****     /* disable interrupt */
 731:rt_thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 732:rt_thread/src/thread.c **** 
 733:rt_thread/src/thread.c ****     /* change thread stat */
 734:rt_thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 735:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 736:rt_thread/src/thread.c **** 
 737:rt_thread/src/thread.c ****     /* stop thread timer anyway */
 738:rt_thread/src/thread.c ****     rt_timer_stop(&(thread->thread_timer));
 739:rt_thread/src/thread.c **** 
 740:rt_thread/src/thread.c ****     /* enable interrupt */
 741:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 742:rt_thread/src/thread.c **** 
 743:rt_thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
 744:rt_thread/src/thread.c ****     return RT_EOK;
 745:rt_thread/src/thread.c **** }
ARM GAS  /tmp/cc7VB9gc.s 			page 21


 746:rt_thread/src/thread.c **** 
 747:rt_thread/src/thread.c **** /**
 748:rt_thread/src/thread.c ****  * This function will resume a thread and put it to system ready queue.
 749:rt_thread/src/thread.c ****  *
 750:rt_thread/src/thread.c ****  * @param thread the thread to be resumed
 751:rt_thread/src/thread.c ****  *
 752:rt_thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 753:rt_thread/src/thread.c ****  */
 754:rt_thread/src/thread.c **** rt_err_t rt_thread_resume(rt_thread_t thread)
 755:rt_thread/src/thread.c **** {
 756:rt_thread/src/thread.c ****     register rt_base_t temp;
 757:rt_thread/src/thread.c **** 
 758:rt_thread/src/thread.c ****     /* thread check */
 759:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 760:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 761:rt_thread/src/thread.c **** 
 762:rt_thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));
 763:rt_thread/src/thread.c **** 
 764:rt_thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
 765:rt_thread/src/thread.c ****     {
 766:rt_thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
 767:rt_thread/src/thread.c ****                                        thread->stat));
 768:rt_thread/src/thread.c **** 
 769:rt_thread/src/thread.c ****         return -RT_ERROR;
 770:rt_thread/src/thread.c ****     }
 771:rt_thread/src/thread.c **** 
 772:rt_thread/src/thread.c ****     /* disable interrupt */
 773:rt_thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 774:rt_thread/src/thread.c **** 
 775:rt_thread/src/thread.c ****     /* remove from suspend list */
 776:rt_thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 777:rt_thread/src/thread.c **** 
 778:rt_thread/src/thread.c ****     rt_timer_stop(&thread->thread_timer);
 779:rt_thread/src/thread.c **** 
 780:rt_thread/src/thread.c ****     /* enable interrupt */
 781:rt_thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 782:rt_thread/src/thread.c **** 
 783:rt_thread/src/thread.c ****     /* insert to schedule ready list */
 784:rt_thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 785:rt_thread/src/thread.c **** 
 786:rt_thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
 787:rt_thread/src/thread.c ****     return RT_EOK;
 788:rt_thread/src/thread.c **** }
 789:rt_thread/src/thread.c **** 
 790:rt_thread/src/thread.c **** /**
 791:rt_thread/src/thread.c ****  * This function is the timeout function for thread, normally which is invoked
 792:rt_thread/src/thread.c ****  * when thread is timeout to wait some resource.
 793:rt_thread/src/thread.c ****  *
 794:rt_thread/src/thread.c ****  * @param parameter the parameter of thread timeout function
 795:rt_thread/src/thread.c ****  */
 796:rt_thread/src/thread.c **** void rt_thread_timeout(void *parameter)
 797:rt_thread/src/thread.c **** {
 331              		.loc 1 797 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		.loc 1 797 1 is_stmt 0 view .LVU96
ARM GAS  /tmp/cc7VB9gc.s 			page 22


 336 0000 08B5     		push	{r3, lr}
 337              	.LCFI5:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 3, -8
 340              		.cfi_offset 14, -4
 798:rt_thread/src/thread.c ****     struct rt_thread *thread;
 341              		.loc 1 798 5 is_stmt 1 view .LVU97
 799:rt_thread/src/thread.c **** 
 800:rt_thread/src/thread.c ****     thread = (struct rt_thread *)parameter;
 342              		.loc 1 800 5 view .LVU98
 343              	.LVL30:
 801:rt_thread/src/thread.c **** 
 802:rt_thread/src/thread.c ****     /* thread check */
 803:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 344              		.loc 1 803 33 view .LVU99
 804:rt_thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
 345              		.loc 1 804 73 view .LVU100
 805:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 346              		.loc 1 805 81 view .LVU101
 806:rt_thread/src/thread.c **** 
 807:rt_thread/src/thread.c ****     /* set error number */
 808:rt_thread/src/thread.c ****     thread->error = -RT_ETIMEOUT;
 347              		.loc 1 808 5 view .LVU102
 348              		.loc 1 808 19 is_stmt 0 view .LVU103
 349 0002 6FF00102 		mvn	r2, #1
 350 0006 0263     		str	r2, [r0, #48]
 809:rt_thread/src/thread.c **** 
 810:rt_thread/src/thread.c ****     /* remove from suspend list */
 811:rt_thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 351              		.loc 1 811 5 is_stmt 1 view .LVU104
 352 0008 00F11402 		add	r2, r0, #20
 353              	.LVL31:
 354              	.LBB22:
 355              	.LBI22:
  65:rt_thread/include/rtservice.h **** }
  66:rt_thread/include/rtservice.h **** 
  67:rt_thread/include/rtservice.h **** /**
  68:rt_thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt_thread/include/rtservice.h ****  *
  70:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt_thread/include/rtservice.h ****  * @param l list to insert it
  72:rt_thread/include/rtservice.h ****  */
  73:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt_thread/include/rtservice.h **** {
  75:rt_thread/include/rtservice.h ****     l->prev->next = n;
  76:rt_thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt_thread/include/rtservice.h **** 
  78:rt_thread/include/rtservice.h ****     l->prev = n;
  79:rt_thread/include/rtservice.h ****     n->next = l;
  80:rt_thread/include/rtservice.h **** }
  81:rt_thread/include/rtservice.h **** 
  82:rt_thread/include/rtservice.h **** /**
  83:rt_thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt_thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt_thread/include/rtservice.h ****  */
  86:rt_thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
 356              		.loc 2 86 16 view .LVU105
ARM GAS  /tmp/cc7VB9gc.s 			page 23


 357              	.LBB23:
  87:rt_thread/include/rtservice.h **** {
  88:rt_thread/include/rtservice.h ****     n->next->prev = n->prev;
 358              		.loc 2 88 5 view .LVU106
 359              		.loc 2 88 22 is_stmt 0 view .LVU107
 360 000c 8169     		ldr	r1, [r0, #24]
 361              		.loc 2 88 19 view .LVU108
 362 000e D0F814C0 		ldr	ip, [r0, #20]
 363 0012 CCF80410 		str	r1, [ip, #4]
  89:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 364              		.loc 2 89 5 is_stmt 1 view .LVU109
 365              		.loc 2 89 19 is_stmt 0 view .LVU110
 366 0016 D0F814C0 		ldr	ip, [r0, #20]
 367 001a C1F800C0 		str	ip, [r1]
  90:rt_thread/include/rtservice.h **** 
  91:rt_thread/include/rtservice.h ****     n->next = n->prev = n;
 368              		.loc 2 91 5 is_stmt 1 view .LVU111
 369              		.loc 2 91 23 is_stmt 0 view .LVU112
 370 001e 8261     		str	r2, [r0, #24]
 371              		.loc 2 91 13 view .LVU113
 372 0020 4261     		str	r2, [r0, #20]
 373              	.LVL32:
 374              		.loc 2 91 13 view .LVU114
 375              	.LBE23:
 376              	.LBE22:
 812:rt_thread/src/thread.c **** 
 813:rt_thread/src/thread.c ****     /* insert to schedule ready list */
 814:rt_thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 377              		.loc 1 814 5 is_stmt 1 view .LVU115
 378 0022 FFF7FEFF 		bl	rt_schedule_insert_thread
 379              	.LVL33:
 815:rt_thread/src/thread.c **** 
 816:rt_thread/src/thread.c ****     /* do schedule */
 817:rt_thread/src/thread.c ****     rt_schedule();
 380              		.loc 1 817 5 view .LVU116
 381 0026 FFF7FEFF 		bl	rt_schedule
 382              	.LVL34:
 818:rt_thread/src/thread.c **** }
 383              		.loc 1 818 1 is_stmt 0 view .LVU117
 384 002a 08BD     		pop	{r3, pc}
 385              		.cfi_endproc
 386              	.LFE32:
 388              		.section	.text.rt_thread_init,"ax",%progbits
 389              		.align	1
 390              		.global	rt_thread_init
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	rt_thread_init:
 396              	.LVL35:
 397              	.LFB18:
 231:rt_thread/src/thread.c ****     /* thread check */
 398              		.loc 1 231 1 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 16, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 231:rt_thread/src/thread.c ****     /* thread check */
ARM GAS  /tmp/cc7VB9gc.s 			page 24


 402              		.loc 1 231 1 is_stmt 0 view .LVU119
 403 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 404              	.LCFI6:
 405              		.cfi_def_cfa_offset 20
 406              		.cfi_offset 4, -20
 407              		.cfi_offset 5, -16
 408              		.cfi_offset 6, -12
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 85B0     		sub	sp, sp, #20
 412              	.LCFI7:
 413              		.cfi_def_cfa_offset 40
 414 0004 0546     		mov	r5, r0
 415 0006 0C46     		mov	r4, r1
 416 0008 1646     		mov	r6, r2
 417 000a 1F46     		mov	r7, r3
 233:rt_thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 418              		.loc 1 233 33 is_stmt 1 view .LVU120
 234:rt_thread/src/thread.c **** 
 419              		.loc 1 234 38 view .LVU121
 237:rt_thread/src/thread.c **** 
 420              		.loc 1 237 5 view .LVU122
 421 000c 0A46     		mov	r2, r1
 422              	.LVL36:
 237:rt_thread/src/thread.c **** 
 423              		.loc 1 237 5 is_stmt 0 view .LVU123
 424 000e 0121     		movs	r1, #1
 425              	.LVL37:
 237:rt_thread/src/thread.c **** 
 426              		.loc 1 237 5 view .LVU124
 427 0010 FFF7FEFF 		bl	rt_object_init
 428              	.LVL38:
 239:rt_thread/src/thread.c ****                            name,
 429              		.loc 1 239 5 is_stmt 1 view .LVU125
 239:rt_thread/src/thread.c ****                            name,
 430              		.loc 1 239 12 is_stmt 0 view .LVU126
 431 0014 0D9B     		ldr	r3, [sp, #52]
 432 0016 0393     		str	r3, [sp, #12]
 433 0018 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 434 001c 0293     		str	r3, [sp, #8]
 435 001e 0B9B     		ldr	r3, [sp, #44]
 436 0020 0193     		str	r3, [sp, #4]
 437 0022 0A9B     		ldr	r3, [sp, #40]
 438 0024 0093     		str	r3, [sp]
 439 0026 3B46     		mov	r3, r7
 440 0028 3246     		mov	r2, r6
 441 002a 2146     		mov	r1, r4
 442 002c 2846     		mov	r0, r5
 443 002e FFF7FEFF 		bl	_rt_thread_init
 444              	.LVL39:
 247:rt_thread/src/thread.c **** 
 445              		.loc 1 247 1 view .LVU127
 446 0032 05B0     		add	sp, sp, #20
 447              	.LCFI8:
 448              		.cfi_def_cfa_offset 20
 449              		@ sp needed
 450 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc7VB9gc.s 			page 25


 247:rt_thread/src/thread.c **** 
 451              		.loc 1 247 1 view .LVU128
 452              		.cfi_endproc
 453              	.LFE18:
 455              		.section	.text.rt_thread_self,"ax",%progbits
 456              		.align	1
 457              		.global	rt_thread_self
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 462              	rt_thread_self:
 463              	.LFB19:
 255:rt_thread/src/thread.c ****     return rt_current_thread;
 464              		.loc 1 255 1 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 256:rt_thread/src/thread.c **** }
 469              		.loc 1 256 5 view .LVU130
 257:rt_thread/src/thread.c **** 
 470              		.loc 1 257 1 is_stmt 0 view .LVU131
 471 0000 014B     		ldr	r3, .L20
 472 0002 1868     		ldr	r0, [r3]
 473 0004 7047     		bx	lr
 474              	.L21:
 475 0006 00BF     		.align	2
 476              	.L20:
 477 0008 00000000 		.word	rt_current_thread
 478              		.cfi_endproc
 479              	.LFE19:
 481              		.section	.text.rt_thread_detach,"ax",%progbits
 482              		.align	1
 483              		.global	rt_thread_detach
 484              		.syntax unified
 485              		.thumb
 486              		.thumb_func
 488              	rt_thread_detach:
 489              	.LVL40:
 490              	.LFB21:
 309:rt_thread/src/thread.c ****     rt_base_t lock;
 491              		.loc 1 309 1 is_stmt 1 view -0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 310:rt_thread/src/thread.c **** 
 495              		.loc 1 310 5 view .LVU133
 313:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 496              		.loc 1 313 33 view .LVU134
 314:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 497              		.loc 1 314 81 view .LVU135
 315:rt_thread/src/thread.c **** 
 498              		.loc 1 315 62 view .LVU136
 317:rt_thread/src/thread.c ****         return RT_EOK;
 499              		.loc 1 317 5 view .LVU137
 317:rt_thread/src/thread.c ****         return RT_EOK;
 500              		.loc 1 317 16 is_stmt 0 view .LVU138
ARM GAS  /tmp/cc7VB9gc.s 			page 26


 501 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 502 0004 03F00F03 		and	r3, r3, #15
 317:rt_thread/src/thread.c ****         return RT_EOK;
 503              		.loc 1 317 8 view .LVU139
 504 0008 042B     		cmp	r3, #4
 505 000a 26D0     		beq	.L27
 309:rt_thread/src/thread.c ****     rt_base_t lock;
 506              		.loc 1 309 1 view .LVU140
 507 000c 10B5     		push	{r4, lr}
 508              	.LCFI9:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 000e 0446     		mov	r4, r0
 320:rt_thread/src/thread.c ****     {
 513              		.loc 1 320 5 is_stmt 1 view .LVU141
 320:rt_thread/src/thread.c ****     {
 514              		.loc 1 320 8 is_stmt 0 view .LVU142
 515 0010 E3B9     		cbnz	r3, .L30
 516              	.LVL41:
 517              	.L24:
 326:rt_thread/src/thread.c **** 
 518              		.loc 1 326 5 is_stmt 1 view .LVU143
 519 0012 2046     		mov	r0, r4
 520 0014 FFF7FEFF 		bl	_thread_cleanup_execute
 521              	.LVL42:
 329:rt_thread/src/thread.c **** 
 522              		.loc 1 329 5 view .LVU144
 523 0018 04F14400 		add	r0, r4, #68
 524 001c FFF7FEFF 		bl	rt_timer_detach
 525              	.LVL43:
 332:rt_thread/src/thread.c **** 
 526              		.loc 1 332 5 view .LVU145
 332:rt_thread/src/thread.c **** 
 527              		.loc 1 332 18 is_stmt 0 view .LVU146
 528 0020 0423     		movs	r3, #4
 529 0022 84F83430 		strb	r3, [r4, #52]
 334:rt_thread/src/thread.c ****     {
 530              		.loc 1 334 5 is_stmt 1 view .LVU147
 334:rt_thread/src/thread.c ****     {
 531              		.loc 1 334 9 is_stmt 0 view .LVU148
 532 0026 2046     		mov	r0, r4
 533 0028 FFF7FEFF 		bl	rt_object_is_systemobject
 534              	.LVL44:
 334:rt_thread/src/thread.c ****     {
 535              		.loc 1 334 8 view .LVU149
 536 002c 0128     		cmp	r0, #1
 537 002e 10D0     		beq	.L31
 341:rt_thread/src/thread.c ****         /* insert to defunct thread list */
 538              		.loc 1 341 9 is_stmt 1 view .LVU150
 341:rt_thread/src/thread.c ****         /* insert to defunct thread list */
 539              		.loc 1 341 16 is_stmt 0 view .LVU151
 540 0030 FFF7FEFF 		bl	rt_hw_interrupt_disable
 541              	.LVL45:
 343:rt_thread/src/thread.c ****         /* enable interrupt */
 542              		.loc 1 343 9 is_stmt 1 view .LVU152
 543 0034 04F11402 		add	r2, r4, #20
ARM GAS  /tmp/cc7VB9gc.s 			page 27


 544              	.LVL46:
 545              	.LBB24:
 546              	.LBI24:
  58:rt_thread/include/rtservice.h **** {
 547              		.loc 2 58 16 view .LVU153
 548              	.LBB25:
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 549              		.loc 2 60 5 view .LVU154
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 550              		.loc 2 60 6 is_stmt 0 view .LVU155
 551 0038 094B     		ldr	r3, .L32
 552 003a 1968     		ldr	r1, [r3]
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 553              		.loc 2 60 19 view .LVU156
 554 003c 4A60     		str	r2, [r1, #4]
  61:rt_thread/include/rtservice.h **** 
 555              		.loc 2 61 5 is_stmt 1 view .LVU157
  61:rt_thread/include/rtservice.h **** 
 556              		.loc 2 61 13 is_stmt 0 view .LVU158
 557 003e 6161     		str	r1, [r4, #20]
  63:rt_thread/include/rtservice.h ****     n->prev = l;
 558              		.loc 2 63 5 is_stmt 1 view .LVU159
  63:rt_thread/include/rtservice.h ****     n->prev = l;
 559              		.loc 2 63 13 is_stmt 0 view .LVU160
 560 0040 1A60     		str	r2, [r3]
  64:rt_thread/include/rtservice.h **** }
 561              		.loc 2 64 5 is_stmt 1 view .LVU161
  64:rt_thread/include/rtservice.h **** }
 562              		.loc 2 64 13 is_stmt 0 view .LVU162
 563 0042 A361     		str	r3, [r4, #24]
 564              	.LVL47:
  64:rt_thread/include/rtservice.h **** }
 565              		.loc 2 64 13 view .LVU163
 566              	.LBE25:
 567              	.LBE24:
 345:rt_thread/src/thread.c ****     }
 568              		.loc 1 345 9 is_stmt 1 view .LVU164
 569 0044 FFF7FEFF 		bl	rt_hw_interrupt_enable
 570              	.LVL48:
 571              	.L23:
 349:rt_thread/src/thread.c **** 
 572              		.loc 1 349 1 is_stmt 0 view .LVU165
 573 0048 0020     		movs	r0, #0
 574 004a 10BD     		pop	{r4, pc}
 575              	.LVL49:
 576              	.L30:
 323:rt_thread/src/thread.c ****     }
 577              		.loc 1 323 9 is_stmt 1 view .LVU166
 578 004c FFF7FEFF 		bl	rt_schedule_remove_thread
 579              	.LVL50:
 323:rt_thread/src/thread.c ****     }
 580              		.loc 1 323 9 is_stmt 0 view .LVU167
 581 0050 DFE7     		b	.L24
 582              	.L31:
 336:rt_thread/src/thread.c ****     }
 583              		.loc 1 336 9 is_stmt 1 view .LVU168
 584 0052 2046     		mov	r0, r4
ARM GAS  /tmp/cc7VB9gc.s 			page 28


 585 0054 FFF7FEFF 		bl	rt_object_detach
 586              	.LVL51:
 587 0058 F6E7     		b	.L23
 588              	.LVL52:
 589              	.L27:
 590              	.LCFI10:
 591              		.cfi_def_cfa_offset 0
 592              		.cfi_restore 4
 593              		.cfi_restore 14
 349:rt_thread/src/thread.c **** 
 594              		.loc 1 349 1 is_stmt 0 view .LVU169
 595 005a 0020     		movs	r0, #0
 596              	.LVL53:
 349:rt_thread/src/thread.c **** 
 597              		.loc 1 349 1 view .LVU170
 598 005c 7047     		bx	lr
 599              	.L33:
 600 005e 00BF     		.align	2
 601              	.L32:
 602 0060 00000000 		.word	rt_thread_defunct
 603              		.cfi_endproc
 604              	.LFE21:
 606              		.section	.text.rt_thread_create,"ax",%progbits
 607              		.align	1
 608              		.global	rt_thread_create
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 613              	rt_thread_create:
 614              	.LVL54:
 615              	.LFB22:
 371:rt_thread/src/thread.c ****     struct rt_thread *thread;
 616              		.loc 1 371 1 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 8, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 371:rt_thread/src/thread.c ****     struct rt_thread *thread;
 620              		.loc 1 371 1 is_stmt 0 view .LVU172
 621 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 622              	.LCFI11:
 623              		.cfi_def_cfa_offset 28
 624              		.cfi_offset 4, -28
 625              		.cfi_offset 5, -24
 626              		.cfi_offset 6, -20
 627              		.cfi_offset 7, -16
 628              		.cfi_offset 8, -12
 629              		.cfi_offset 9, -8
 630              		.cfi_offset 14, -4
 631 0004 85B0     		sub	sp, sp, #20
 632              	.LCFI12:
 633              		.cfi_def_cfa_offset 48
 634 0006 0446     		mov	r4, r0
 635 0008 0F46     		mov	r7, r1
 636 000a 9046     		mov	r8, r2
 637 000c 1D46     		mov	r5, r3
 372:rt_thread/src/thread.c ****     void *stack_start;
 638              		.loc 1 372 5 is_stmt 1 view .LVU173
ARM GAS  /tmp/cc7VB9gc.s 			page 29


 373:rt_thread/src/thread.c **** 
 639              		.loc 1 373 5 view .LVU174
 375:rt_thread/src/thread.c ****                                                     name);
 640              		.loc 1 375 5 view .LVU175
 375:rt_thread/src/thread.c ****                                                     name);
 641              		.loc 1 375 34 is_stmt 0 view .LVU176
 642 000e 0146     		mov	r1, r0
 643              	.LVL55:
 375:rt_thread/src/thread.c ****                                                     name);
 644              		.loc 1 375 34 view .LVU177
 645 0010 0120     		movs	r0, #1
 646              	.LVL56:
 375:rt_thread/src/thread.c ****                                                     name);
 647              		.loc 1 375 34 view .LVU178
 648 0012 FFF7FEFF 		bl	rt_object_allocate
 649              	.LVL57:
 377:rt_thread/src/thread.c ****         return RT_NULL;
 650              		.loc 1 377 5 is_stmt 1 view .LVU179
 377:rt_thread/src/thread.c ****         return RT_NULL;
 651              		.loc 1 377 8 is_stmt 0 view .LVU180
 652 0016 0646     		mov	r6, r0
 653 0018 88B1     		cbz	r0, .L34
 380:rt_thread/src/thread.c ****     if (stack_start == RT_NULL)
 654              		.loc 1 380 5 is_stmt 1 view .LVU181
 380:rt_thread/src/thread.c ****     if (stack_start == RT_NULL)
 655              		.loc 1 380 19 is_stmt 0 view .LVU182
 656 001a 2846     		mov	r0, r5
 657              	.LVL58:
 380:rt_thread/src/thread.c ****     if (stack_start == RT_NULL)
 658              		.loc 1 380 19 view .LVU183
 659 001c FFF7FEFF 		bl	rt_malloc
 660              	.LVL59:
 381:rt_thread/src/thread.c ****     {
 661              		.loc 1 381 5 is_stmt 1 view .LVU184
 381:rt_thread/src/thread.c ****     {
 662              		.loc 1 381 8 is_stmt 0 view .LVU185
 663 0020 8146     		mov	r9, r0
 664 0022 80B1     		cbz	r0, .L38
 389:rt_thread/src/thread.c ****                     name,
 665              		.loc 1 389 5 is_stmt 1 view .LVU186
 666 0024 0D9B     		ldr	r3, [sp, #52]
 667 0026 0393     		str	r3, [sp, #12]
 668 0028 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 669 002c 0293     		str	r3, [sp, #8]
 670 002e 0195     		str	r5, [sp, #4]
 671 0030 0090     		str	r0, [sp]
 672 0032 4346     		mov	r3, r8
 673 0034 3A46     		mov	r2, r7
 674 0036 2146     		mov	r1, r4
 675 0038 3046     		mov	r0, r6
 676              	.LVL60:
 389:rt_thread/src/thread.c ****                     name,
 677              		.loc 1 389 5 is_stmt 0 view .LVU187
 678 003a FFF7FEFF 		bl	_rt_thread_init
 679              	.LVL61:
 398:rt_thread/src/thread.c **** }
 680              		.loc 1 398 5 is_stmt 1 view .LVU188
ARM GAS  /tmp/cc7VB9gc.s 			page 30


 681              	.L34:
 399:rt_thread/src/thread.c **** 
 682              		.loc 1 399 1 is_stmt 0 view .LVU189
 683 003e 3046     		mov	r0, r6
 684 0040 05B0     		add	sp, sp, #20
 685              	.LCFI13:
 686              		.cfi_remember_state
 687              		.cfi_def_cfa_offset 28
 688              		@ sp needed
 689 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 690              	.LVL62:
 691              	.L38:
 692              	.LCFI14:
 693              		.cfi_restore_state
 384:rt_thread/src/thread.c **** 
 694              		.loc 1 384 9 is_stmt 1 view .LVU190
 695 0046 3046     		mov	r0, r6
 696              	.LVL63:
 384:rt_thread/src/thread.c **** 
 697              		.loc 1 384 9 is_stmt 0 view .LVU191
 698 0048 FFF7FEFF 		bl	rt_object_delete
 699              	.LVL64:
 386:rt_thread/src/thread.c ****     }
 700              		.loc 1 386 9 is_stmt 1 view .LVU192
 386:rt_thread/src/thread.c ****     }
 701              		.loc 1 386 16 is_stmt 0 view .LVU193
 702 004c 4E46     		mov	r6, r9
 703              	.LVL65:
 386:rt_thread/src/thread.c ****     }
 704              		.loc 1 386 16 view .LVU194
 705 004e F6E7     		b	.L34
 706              		.cfi_endproc
 707              	.LFE22:
 709              		.section	.text.rt_thread_delete,"ax",%progbits
 710              		.align	1
 711              		.global	rt_thread_delete
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 716              	rt_thread_delete:
 717              	.LVL66:
 718              	.LFB23:
 410:rt_thread/src/thread.c ****     rt_base_t lock;
 719              		.loc 1 410 1 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 411:rt_thread/src/thread.c **** 
 723              		.loc 1 411 5 view .LVU196
 414:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 724              		.loc 1 414 33 view .LVU197
 415:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 725              		.loc 1 415 81 view .LVU198
 416:rt_thread/src/thread.c **** 
 726              		.loc 1 416 74 view .LVU199
 418:rt_thread/src/thread.c ****         return RT_EOK;
 727              		.loc 1 418 5 view .LVU200
ARM GAS  /tmp/cc7VB9gc.s 			page 31


 418:rt_thread/src/thread.c ****         return RT_EOK;
 728              		.loc 1 418 16 is_stmt 0 view .LVU201
 729 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 730 0004 03F00F03 		and	r3, r3, #15
 418:rt_thread/src/thread.c ****         return RT_EOK;
 731              		.loc 1 418 8 view .LVU202
 732 0008 042B     		cmp	r3, #4
 733 000a 1DD0     		beq	.L43
 410:rt_thread/src/thread.c ****     rt_base_t lock;
 734              		.loc 1 410 1 view .LVU203
 735 000c 10B5     		push	{r4, lr}
 736              	.LCFI15:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 4, -8
 739              		.cfi_offset 14, -4
 740 000e 0446     		mov	r4, r0
 421:rt_thread/src/thread.c ****     {
 741              		.loc 1 421 5 is_stmt 1 view .LVU204
 421:rt_thread/src/thread.c ****     {
 742              		.loc 1 421 8 is_stmt 0 view .LVU205
 743 0010 BBB9     		cbnz	r3, .L46
 744              	.LVL67:
 745              	.L41:
 427:rt_thread/src/thread.c **** 
 746              		.loc 1 427 5 is_stmt 1 view .LVU206
 747 0012 2046     		mov	r0, r4
 748 0014 FFF7FEFF 		bl	_thread_cleanup_execute
 749              	.LVL68:
 430:rt_thread/src/thread.c **** 
 750              		.loc 1 430 5 view .LVU207
 751 0018 04F14400 		add	r0, r4, #68
 752 001c FFF7FEFF 		bl	rt_timer_detach
 753              	.LVL69:
 433:rt_thread/src/thread.c **** 
 754              		.loc 1 433 5 view .LVU208
 433:rt_thread/src/thread.c **** 
 755              		.loc 1 433 12 is_stmt 0 view .LVU209
 756 0020 FFF7FEFF 		bl	rt_hw_interrupt_disable
 757              	.LVL70:
 436:rt_thread/src/thread.c **** 
 758              		.loc 1 436 5 is_stmt 1 view .LVU210
 436:rt_thread/src/thread.c **** 
 759              		.loc 1 436 18 is_stmt 0 view .LVU211
 760 0024 0423     		movs	r3, #4
 761 0026 84F83430 		strb	r3, [r4, #52]
 439:rt_thread/src/thread.c **** 
 762              		.loc 1 439 5 is_stmt 1 view .LVU212
 763 002a 04F11402 		add	r2, r4, #20
 764              	.LVL71:
 765              	.LBB26:
 766              	.LBI26:
  58:rt_thread/include/rtservice.h **** {
 767              		.loc 2 58 16 view .LVU213
 768              	.LBB27:
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 769              		.loc 2 60 5 view .LVU214
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
ARM GAS  /tmp/cc7VB9gc.s 			page 32


 770              		.loc 2 60 6 is_stmt 0 view .LVU215
 771 002e 074B     		ldr	r3, .L47
 772 0030 1968     		ldr	r1, [r3]
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 773              		.loc 2 60 19 view .LVU216
 774 0032 4A60     		str	r2, [r1, #4]
  61:rt_thread/include/rtservice.h **** 
 775              		.loc 2 61 5 is_stmt 1 view .LVU217
  61:rt_thread/include/rtservice.h **** 
 776              		.loc 2 61 13 is_stmt 0 view .LVU218
 777 0034 6161     		str	r1, [r4, #20]
  63:rt_thread/include/rtservice.h ****     n->prev = l;
 778              		.loc 2 63 5 is_stmt 1 view .LVU219
  63:rt_thread/include/rtservice.h ****     n->prev = l;
 779              		.loc 2 63 13 is_stmt 0 view .LVU220
 780 0036 1A60     		str	r2, [r3]
  64:rt_thread/include/rtservice.h **** }
 781              		.loc 2 64 5 is_stmt 1 view .LVU221
  64:rt_thread/include/rtservice.h **** }
 782              		.loc 2 64 13 is_stmt 0 view .LVU222
 783 0038 A361     		str	r3, [r4, #24]
 784              	.LVL72:
  64:rt_thread/include/rtservice.h **** }
 785              		.loc 2 64 13 view .LVU223
 786              	.LBE27:
 787              	.LBE26:
 442:rt_thread/src/thread.c **** 
 788              		.loc 1 442 5 is_stmt 1 view .LVU224
 789 003a FFF7FEFF 		bl	rt_hw_interrupt_enable
 790              	.LVL73:
 444:rt_thread/src/thread.c **** }
 791              		.loc 1 444 5 view .LVU225
 445:rt_thread/src/thread.c **** #endif
 792              		.loc 1 445 1 is_stmt 0 view .LVU226
 793 003e 0020     		movs	r0, #0
 794 0040 10BD     		pop	{r4, pc}
 795              	.LVL74:
 796              	.L46:
 424:rt_thread/src/thread.c ****     }
 797              		.loc 1 424 9 is_stmt 1 view .LVU227
 798 0042 FFF7FEFF 		bl	rt_schedule_remove_thread
 799              	.LVL75:
 424:rt_thread/src/thread.c ****     }
 800              		.loc 1 424 9 is_stmt 0 view .LVU228
 801 0046 E4E7     		b	.L41
 802              	.LVL76:
 803              	.L43:
 804              	.LCFI16:
 805              		.cfi_def_cfa_offset 0
 806              		.cfi_restore 4
 807              		.cfi_restore 14
 445:rt_thread/src/thread.c **** #endif
 808              		.loc 1 445 1 view .LVU229
 809 0048 0020     		movs	r0, #0
 810              	.LVL77:
 445:rt_thread/src/thread.c **** #endif
 811              		.loc 1 445 1 view .LVU230
ARM GAS  /tmp/cc7VB9gc.s 			page 33


 812 004a 7047     		bx	lr
 813              	.L48:
 814              		.align	2
 815              	.L47:
 816 004c 00000000 		.word	rt_thread_defunct
 817              		.cfi_endproc
 818              	.LFE23:
 820              		.section	.text.rt_thread_yield,"ax",%progbits
 821              		.align	1
 822              		.global	rt_thread_yield
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 827              	rt_thread_yield:
 828              	.LFB24:
 456:rt_thread/src/thread.c ****     register rt_base_t level;
 829              		.loc 1 456 1 is_stmt 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833 0000 10B5     		push	{r4, lr}
 834              	.LCFI17:
 835              		.cfi_def_cfa_offset 8
 836              		.cfi_offset 4, -8
 837              		.cfi_offset 14, -4
 457:rt_thread/src/thread.c ****     struct rt_thread *thread;
 838              		.loc 1 457 5 view .LVU232
 458:rt_thread/src/thread.c **** 
 839              		.loc 1 458 5 view .LVU233
 461:rt_thread/src/thread.c **** 
 840              		.loc 1 461 5 view .LVU234
 461:rt_thread/src/thread.c **** 
 841              		.loc 1 461 13 is_stmt 0 view .LVU235
 842 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
 843              	.LVL78:
 464:rt_thread/src/thread.c **** 
 844              		.loc 1 464 5 is_stmt 1 view .LVU236
 464:rt_thread/src/thread.c **** 
 845              		.loc 1 464 12 is_stmt 0 view .LVU237
 846 0006 134B     		ldr	r3, .L54
 847 0008 1B68     		ldr	r3, [r3]
 848              	.LVL79:
 467:rt_thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 849              		.loc 1 467 5 is_stmt 1 view .LVU238
 467:rt_thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 850              		.loc 1 467 16 is_stmt 0 view .LVU239
 851 000a 93F83420 		ldrb	r2, [r3, #52]	@ zero_extendqisi2
 467:rt_thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 852              		.loc 1 467 8 view .LVU240
 853 000e 02F00F02 		and	r2, r2, #15
 854 0012 012A     		cmp	r2, #1
 855 0014 03D1     		bne	.L50
 468:rt_thread/src/thread.c ****     {
 856              		.loc 1 468 22 discriminator 1 view .LVU241
 857 0016 5969     		ldr	r1, [r3, #20]
 468:rt_thread/src/thread.c ****     {
 858              		.loc 1 468 44 discriminator 1 view .LVU242
ARM GAS  /tmp/cc7VB9gc.s 			page 34


 859 0018 9A69     		ldr	r2, [r3, #24]
 467:rt_thread/src/thread.c ****         thread->tlist.next != thread->tlist.prev)
 860              		.loc 1 467 65 discriminator 1 view .LVU243
 861 001a 9142     		cmp	r1, r2
 862 001c 03D1     		bne	.L53
 863              	.L50:
 486:rt_thread/src/thread.c **** 
 864              		.loc 1 486 5 is_stmt 1 view .LVU244
 865 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 866              	.LVL80:
 488:rt_thread/src/thread.c **** }
 867              		.loc 1 488 5 view .LVU245
 868              	.L51:
 489:rt_thread/src/thread.c **** 
 869              		.loc 1 489 1 is_stmt 0 view .LVU246
 870 0022 0020     		movs	r0, #0
 871 0024 10BD     		pop	{r4, pc}
 872              	.LVL81:
 873              	.L53:
 471:rt_thread/src/thread.c **** 
 874              		.loc 1 471 9 is_stmt 1 view .LVU247
 875 0026 03F11404 		add	r4, r3, #20
 876              	.LVL82:
 877              	.LBB28:
 878              	.LBI28:
  86:rt_thread/include/rtservice.h **** {
 879              		.loc 2 86 16 view .LVU248
 880              	.LBB29:
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 881              		.loc 2 88 5 view .LVU249
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 882              		.loc 2 88 19 is_stmt 0 view .LVU250
 883 002a 4A60     		str	r2, [r1, #4]
  89:rt_thread/include/rtservice.h **** 
 884              		.loc 2 89 5 is_stmt 1 view .LVU251
  89:rt_thread/include/rtservice.h **** 
 885              		.loc 2 89 22 is_stmt 0 view .LVU252
 886 002c 5969     		ldr	r1, [r3, #20]
  89:rt_thread/include/rtservice.h **** 
 887              		.loc 2 89 19 view .LVU253
 888 002e 1160     		str	r1, [r2]
 889              		.loc 2 91 5 is_stmt 1 view .LVU254
 890              		.loc 2 91 23 is_stmt 0 view .LVU255
 891 0030 9C61     		str	r4, [r3, #24]
 892              		.loc 2 91 13 view .LVU256
 893 0032 5C61     		str	r4, [r3, #20]
 894              	.LVL83:
 895              		.loc 2 91 13 view .LVU257
 896              	.LBE29:
 897              	.LBE28:
 474:rt_thread/src/thread.c ****                               &(thread->tlist));
 898              		.loc 1 474 9 is_stmt 1 view .LVU258
 474:rt_thread/src/thread.c ****                               &(thread->tlist));
 899              		.loc 1 474 64 is_stmt 0 view .LVU259
 900 0034 93F83510 		ldrb	r1, [r3, #53]	@ zero_extendqisi2
 474:rt_thread/src/thread.c ****                               &(thread->tlist));
 901              		.loc 1 474 9 view .LVU260
ARM GAS  /tmp/cc7VB9gc.s 			page 35


 902 0038 074A     		ldr	r2, .L54+4
 903 003a 02EBC102 		add	r2, r2, r1, lsl #3
 904              	.LVL84:
 905              	.LBB30:
 906              	.LBI30:
  73:rt_thread/include/rtservice.h **** {
 907              		.loc 2 73 16 is_stmt 1 view .LVU261
 908              	.LBB31:
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 909              		.loc 2 75 5 view .LVU262
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 910              		.loc 2 75 6 is_stmt 0 view .LVU263
 911 003e 5168     		ldr	r1, [r2, #4]
  75:rt_thread/include/rtservice.h ****     n->prev = l->prev;
 912              		.loc 2 75 19 view .LVU264
 913 0040 0C60     		str	r4, [r1]
  76:rt_thread/include/rtservice.h **** 
 914              		.loc 2 76 5 is_stmt 1 view .LVU265
  76:rt_thread/include/rtservice.h **** 
 915              		.loc 2 76 16 is_stmt 0 view .LVU266
 916 0042 5168     		ldr	r1, [r2, #4]
  76:rt_thread/include/rtservice.h **** 
 917              		.loc 2 76 13 view .LVU267
 918 0044 9961     		str	r1, [r3, #24]
  78:rt_thread/include/rtservice.h ****     n->next = l;
 919              		.loc 2 78 5 is_stmt 1 view .LVU268
  78:rt_thread/include/rtservice.h ****     n->next = l;
 920              		.loc 2 78 13 is_stmt 0 view .LVU269
 921 0046 5460     		str	r4, [r2, #4]
  79:rt_thread/include/rtservice.h **** }
 922              		.loc 2 79 5 is_stmt 1 view .LVU270
  79:rt_thread/include/rtservice.h **** }
 923              		.loc 2 79 13 is_stmt 0 view .LVU271
 924 0048 5A61     		str	r2, [r3, #20]
 925              	.LVL85:
  79:rt_thread/include/rtservice.h **** }
 926              		.loc 2 79 13 view .LVU272
 927              	.LBE31:
 928              	.LBE30:
 478:rt_thread/src/thread.c **** 
 929              		.loc 1 478 9 is_stmt 1 view .LVU273
 930 004a FFF7FEFF 		bl	rt_hw_interrupt_enable
 931              	.LVL86:
 480:rt_thread/src/thread.c **** 
 932              		.loc 1 480 9 view .LVU274
 933 004e FFF7FEFF 		bl	rt_schedule
 934              	.LVL87:
 482:rt_thread/src/thread.c ****     }
 935              		.loc 1 482 9 view .LVU275
 482:rt_thread/src/thread.c ****     }
 936              		.loc 1 482 16 is_stmt 0 view .LVU276
 937 0052 E6E7     		b	.L51
 938              	.L55:
 939              		.align	2
 940              	.L54:
 941 0054 00000000 		.word	rt_current_thread
 942 0058 00000000 		.word	rt_thread_priority_table
ARM GAS  /tmp/cc7VB9gc.s 			page 36


 943              		.cfi_endproc
 944              	.LFE24:
 946              		.section	.text.rt_thread_suspend,"ax",%progbits
 947              		.align	1
 948              		.global	rt_thread_suspend
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	rt_thread_suspend:
 954              	.LVL88:
 955              	.LFB30:
 713:rt_thread/src/thread.c ****     register rt_base_t temp;
 956              		.loc 1 713 1 is_stmt 1 view -0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 713:rt_thread/src/thread.c ****     register rt_base_t temp;
 960              		.loc 1 713 1 is_stmt 0 view .LVU278
 961 0000 38B5     		push	{r3, r4, r5, lr}
 962              	.LCFI18:
 963              		.cfi_def_cfa_offset 16
 964              		.cfi_offset 3, -16
 965              		.cfi_offset 4, -12
 966              		.cfi_offset 5, -8
 967              		.cfi_offset 14, -4
 714:rt_thread/src/thread.c **** 
 968              		.loc 1 714 5 is_stmt 1 view .LVU279
 717:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 969              		.loc 1 717 33 view .LVU280
 718:rt_thread/src/thread.c **** 
 970              		.loc 1 718 81 view .LVU281
 720:rt_thread/src/thread.c **** 
 971              		.loc 1 720 75 view .LVU282
 722:rt_thread/src/thread.c ****     {
 972              		.loc 1 722 5 view .LVU283
 722:rt_thread/src/thread.c ****     {
 973              		.loc 1 722 16 is_stmt 0 view .LVU284
 974 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 722:rt_thread/src/thread.c ****     {
 975              		.loc 1 722 8 view .LVU285
 976 0006 03F00F03 		and	r3, r3, #15
 977 000a 012B     		cmp	r3, #1
 978 000c 17D1     		bne	.L58
 979 000e 0446     		mov	r4, r0
 731:rt_thread/src/thread.c **** 
 980              		.loc 1 731 5 is_stmt 1 view .LVU286
 731:rt_thread/src/thread.c **** 
 981              		.loc 1 731 12 is_stmt 0 view .LVU287
 982 0010 FFF7FEFF 		bl	rt_hw_interrupt_disable
 983              	.LVL89:
 731:rt_thread/src/thread.c **** 
 984              		.loc 1 731 12 view .LVU288
 985 0014 0546     		mov	r5, r0
 986              	.LVL90:
 734:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 987              		.loc 1 734 5 is_stmt 1 view .LVU289
 988 0016 2046     		mov	r0, r4
ARM GAS  /tmp/cc7VB9gc.s 			page 37


 989              	.LVL91:
 734:rt_thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 990              		.loc 1 734 5 is_stmt 0 view .LVU290
 991 0018 FFF7FEFF 		bl	rt_schedule_remove_thread
 992              	.LVL92:
 735:rt_thread/src/thread.c **** 
 993              		.loc 1 735 5 is_stmt 1 view .LVU291
 735:rt_thread/src/thread.c **** 
 994              		.loc 1 735 47 is_stmt 0 view .LVU292
 995 001c 94F93430 		ldrsb	r3, [r4, #52]
 735:rt_thread/src/thread.c **** 
 996              		.loc 1 735 54 view .LVU293
 997 0020 23F00F03 		bic	r3, r3, #15
 735:rt_thread/src/thread.c **** 
 998              		.loc 1 735 38 view .LVU294
 999 0024 43F00203 		orr	r3, r3, #2
 735:rt_thread/src/thread.c **** 
 1000              		.loc 1 735 18 view .LVU295
 1001 0028 84F83430 		strb	r3, [r4, #52]
 738:rt_thread/src/thread.c **** 
 1002              		.loc 1 738 5 is_stmt 1 view .LVU296
 1003 002c 04F14400 		add	r0, r4, #68
 1004 0030 FFF7FEFF 		bl	rt_timer_stop
 1005              	.LVL93:
 741:rt_thread/src/thread.c **** 
 1006              		.loc 1 741 5 view .LVU297
 1007 0034 2846     		mov	r0, r5
 1008 0036 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1009              	.LVL94:
 743:rt_thread/src/thread.c ****     return RT_EOK;
 1010              		.loc 1 743 58 view .LVU298
 744:rt_thread/src/thread.c **** }
 1011              		.loc 1 744 5 view .LVU299
 744:rt_thread/src/thread.c **** }
 1012              		.loc 1 744 12 is_stmt 0 view .LVU300
 1013 003a 0020     		movs	r0, #0
 1014              	.LVL95:
 1015              	.L56:
 745:rt_thread/src/thread.c **** 
 1016              		.loc 1 745 1 view .LVU301
 1017 003c 38BD     		pop	{r3, r4, r5, pc}
 1018              	.LVL96:
 1019              	.L58:
 727:rt_thread/src/thread.c ****     }
 1020              		.loc 1 727 16 view .LVU302
 1021 003e 4FF0FF30 		mov	r0, #-1
 1022              	.LVL97:
 727:rt_thread/src/thread.c ****     }
 1023              		.loc 1 727 16 view .LVU303
 1024 0042 FBE7     		b	.L56
 1025              		.cfi_endproc
 1026              	.LFE30:
 1028              		.section	.text.rt_thread_sleep,"ax",%progbits
 1029              		.align	1
 1030              		.global	rt_thread_sleep
 1031              		.syntax unified
 1032              		.thumb
ARM GAS  /tmp/cc7VB9gc.s 			page 38


 1033              		.thumb_func
 1035              	rt_thread_sleep:
 1036              	.LVL98:
 1037              	.LFB25:
 499:rt_thread/src/thread.c ****     register rt_base_t temp;
 1038              		.loc 1 499 1 is_stmt 1 view -0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 8
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 499:rt_thread/src/thread.c ****     register rt_base_t temp;
 1042              		.loc 1 499 1 is_stmt 0 view .LVU305
 1043 0000 70B5     		push	{r4, r5, r6, lr}
 1044              	.LCFI19:
 1045              		.cfi_def_cfa_offset 16
 1046              		.cfi_offset 4, -16
 1047              		.cfi_offset 5, -12
 1048              		.cfi_offset 6, -8
 1049              		.cfi_offset 14, -4
 1050 0002 82B0     		sub	sp, sp, #8
 1051              	.LCFI20:
 1052              		.cfi_def_cfa_offset 24
 1053 0004 0190     		str	r0, [sp, #4]
 500:rt_thread/src/thread.c ****     struct rt_thread *thread;
 1054              		.loc 1 500 5 is_stmt 1 view .LVU306
 501:rt_thread/src/thread.c **** 
 1055              		.loc 1 501 5 view .LVU307
 504:rt_thread/src/thread.c ****     /* set to current thread */
 1056              		.loc 1 504 5 view .LVU308
 504:rt_thread/src/thread.c ****     /* set to current thread */
 1057              		.loc 1 504 12 is_stmt 0 view .LVU309
 1058 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1059              	.LVL99:
 504:rt_thread/src/thread.c ****     /* set to current thread */
 1060              		.loc 1 504 12 view .LVU310
 1061 000a 0546     		mov	r5, r0
 1062              	.LVL100:
 506:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1063              		.loc 1 506 5 is_stmt 1 view .LVU311
 506:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1064              		.loc 1 506 12 is_stmt 0 view .LVU312
 1065 000c 0E4B     		ldr	r3, .L64
 1066 000e 1C68     		ldr	r4, [r3]
 1067              	.LVL101:
 507:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1068              		.loc 1 507 33 is_stmt 1 view .LVU313
 508:rt_thread/src/thread.c **** 
 1069              		.loc 1 508 81 view .LVU314
 511:rt_thread/src/thread.c **** 
 1070              		.loc 1 511 5 view .LVU315
 1071 0010 2046     		mov	r0, r4
 1072              	.LVL102:
 511:rt_thread/src/thread.c **** 
 1073              		.loc 1 511 5 is_stmt 0 view .LVU316
 1074 0012 FFF7FEFF 		bl	rt_thread_suspend
 1075              	.LVL103:
 514:rt_thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 1076              		.loc 1 514 5 is_stmt 1 view .LVU317
ARM GAS  /tmp/cc7VB9gc.s 			page 39


 1077 0016 04F14406 		add	r6, r4, #68
 1078 001a 01AA     		add	r2, sp, #4
 1079 001c 0021     		movs	r1, #0
 1080 001e 3046     		mov	r0, r6
 1081 0020 FFF7FEFF 		bl	rt_timer_control
 1082              	.LVL104:
 515:rt_thread/src/thread.c **** 
 1083              		.loc 1 515 5 view .LVU318
 1084 0024 3046     		mov	r0, r6
 1085 0026 FFF7FEFF 		bl	rt_timer_start
 1086              	.LVL105:
 518:rt_thread/src/thread.c **** 
 1087              		.loc 1 518 5 view .LVU319
 1088 002a 2846     		mov	r0, r5
 1089 002c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1090              	.LVL106:
 520:rt_thread/src/thread.c **** 
 1091              		.loc 1 520 5 view .LVU320
 1092 0030 FFF7FEFF 		bl	rt_schedule
 1093              	.LVL107:
 523:rt_thread/src/thread.c ****         thread->error = RT_EOK;
 1094              		.loc 1 523 5 view .LVU321
 523:rt_thread/src/thread.c ****         thread->error = RT_EOK;
 1095              		.loc 1 523 15 is_stmt 0 view .LVU322
 1096 0034 236B     		ldr	r3, [r4, #48]
 523:rt_thread/src/thread.c ****         thread->error = RT_EOK;
 1097              		.loc 1 523 8 view .LVU323
 1098 0036 13F1020F 		cmn	r3, #2
 1099 003a 02D0     		beq	.L63
 1100              	.L61:
 526:rt_thread/src/thread.c **** }
 1101              		.loc 1 526 5 is_stmt 1 view .LVU324
 527:rt_thread/src/thread.c **** 
 1102              		.loc 1 527 1 is_stmt 0 view .LVU325
 1103 003c 0020     		movs	r0, #0
 1104 003e 02B0     		add	sp, sp, #8
 1105              	.LCFI21:
 1106              		.cfi_remember_state
 1107              		.cfi_def_cfa_offset 16
 1108              		@ sp needed
 1109 0040 70BD     		pop	{r4, r5, r6, pc}
 1110              	.LVL108:
 1111              	.L63:
 1112              	.LCFI22:
 1113              		.cfi_restore_state
 524:rt_thread/src/thread.c **** 
 1114              		.loc 1 524 9 is_stmt 1 view .LVU326
 524:rt_thread/src/thread.c **** 
 1115              		.loc 1 524 23 is_stmt 0 view .LVU327
 1116 0042 0023     		movs	r3, #0
 1117 0044 2363     		str	r3, [r4, #48]
 1118 0046 F9E7     		b	.L61
 1119              	.L65:
 1120              		.align	2
 1121              	.L64:
 1122 0048 00000000 		.word	rt_current_thread
 1123              		.cfi_endproc
ARM GAS  /tmp/cc7VB9gc.s 			page 40


 1124              	.LFE25:
 1126              		.section	.text.rt_thread_delay,"ax",%progbits
 1127              		.align	1
 1128              		.global	rt_thread_delay
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1133              	rt_thread_delay:
 1134              	.LVL109:
 1135              	.LFB26:
 537:rt_thread/src/thread.c ****     return rt_thread_sleep(tick);
 1136              		.loc 1 537 1 is_stmt 1 view -0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 537:rt_thread/src/thread.c ****     return rt_thread_sleep(tick);
 1140              		.loc 1 537 1 is_stmt 0 view .LVU329
 1141 0000 08B5     		push	{r3, lr}
 1142              	.LCFI23:
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 3, -8
 1145              		.cfi_offset 14, -4
 538:rt_thread/src/thread.c **** }
 1146              		.loc 1 538 5 is_stmt 1 view .LVU330
 538:rt_thread/src/thread.c **** }
 1147              		.loc 1 538 12 is_stmt 0 view .LVU331
 1148 0002 FFF7FEFF 		bl	rt_thread_sleep
 1149              	.LVL110:
 539:rt_thread/src/thread.c **** 
 1150              		.loc 1 539 1 view .LVU332
 1151 0006 08BD     		pop	{r3, pc}
 1152              		.cfi_endproc
 1153              	.LFE26:
 1155              		.section	.text.rt_thread_mdelay,"ax",%progbits
 1156              		.align	1
 1157              		.global	rt_thread_mdelay
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1162              	rt_thread_mdelay:
 1163              	.LVL111:
 1164              	.LFB28:
 605:rt_thread/src/thread.c ****     rt_tick_t tick;
 1165              		.loc 1 605 1 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 605:rt_thread/src/thread.c ****     rt_tick_t tick;
 1169              		.loc 1 605 1 is_stmt 0 view .LVU334
 1170 0000 08B5     		push	{r3, lr}
 1171              	.LCFI24:
 1172              		.cfi_def_cfa_offset 8
 1173              		.cfi_offset 3, -8
 1174              		.cfi_offset 14, -4
 606:rt_thread/src/thread.c **** 
 1175              		.loc 1 606 5 is_stmt 1 view .LVU335
 608:rt_thread/src/thread.c **** 
ARM GAS  /tmp/cc7VB9gc.s 			page 41


 1176              		.loc 1 608 5 view .LVU336
 608:rt_thread/src/thread.c **** 
 1177              		.loc 1 608 12 is_stmt 0 view .LVU337
 1178 0002 FFF7FEFF 		bl	rt_tick_from_millisecond
 1179              	.LVL112:
 610:rt_thread/src/thread.c **** }
 1180              		.loc 1 610 5 is_stmt 1 view .LVU338
 610:rt_thread/src/thread.c **** }
 1181              		.loc 1 610 12 is_stmt 0 view .LVU339
 1182 0006 FFF7FEFF 		bl	rt_thread_sleep
 1183              	.LVL113:
 611:rt_thread/src/thread.c **** 
 1184              		.loc 1 611 1 view .LVU340
 1185 000a 08BD     		pop	{r3, pc}
 1186              		.cfi_endproc
 1187              	.LFE28:
 1189              		.section	.text.rt_thread_delay_until,"ax",%progbits
 1190              		.align	1
 1191              		.global	rt_thread_delay_until
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1196              	rt_thread_delay_until:
 1197              	.LVL114:
 1198              	.LFB27:
 550:rt_thread/src/thread.c ****     register rt_base_t level;
 1199              		.loc 1 550 1 is_stmt 1 view -0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 550:rt_thread/src/thread.c ****     register rt_base_t level;
 1203              		.loc 1 550 1 is_stmt 0 view .LVU342
 1204 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1205              	.LCFI25:
 1206              		.cfi_def_cfa_offset 24
 1207              		.cfi_offset 3, -24
 1208              		.cfi_offset 4, -20
 1209              		.cfi_offset 5, -16
 1210              		.cfi_offset 6, -12
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 0446     		mov	r4, r0
 1214 0004 0E46     		mov	r6, r1
 551:rt_thread/src/thread.c ****     struct rt_thread *thread;
 1215              		.loc 1 551 5 is_stmt 1 view .LVU343
 552:rt_thread/src/thread.c **** 
 1216              		.loc 1 552 5 view .LVU344
 554:rt_thread/src/thread.c **** 
 1217              		.loc 1 554 31 view .LVU345
 557:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1218              		.loc 1 557 5 view .LVU346
 557:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1219              		.loc 1 557 14 is_stmt 0 view .LVU347
 1220 0006 FFF7FEFF 		bl	rt_thread_self
 1221              	.LVL115:
 557:rt_thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1222              		.loc 1 557 14 view .LVU348
ARM GAS  /tmp/cc7VB9gc.s 			page 42


 1223 000a 0546     		mov	r5, r0
 1224              	.LVL116:
 558:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1225              		.loc 1 558 33 is_stmt 1 view .LVU349
 559:rt_thread/src/thread.c **** 
 1226              		.loc 1 559 81 view .LVU350
 562:rt_thread/src/thread.c **** 
 1227              		.loc 1 562 5 view .LVU351
 562:rt_thread/src/thread.c **** 
 1228              		.loc 1 562 13 is_stmt 0 view .LVU352
 1229 000c FFF7FEFF 		bl	rt_hw_interrupt_disable
 1230              	.LVL117:
 562:rt_thread/src/thread.c **** 
 1231              		.loc 1 562 13 view .LVU353
 1232 0010 0746     		mov	r7, r0
 1233              	.LVL118:
 564:rt_thread/src/thread.c ****     {
 1234              		.loc 1 564 5 is_stmt 1 view .LVU354
 564:rt_thread/src/thread.c ****     {
 1235              		.loc 1 564 9 is_stmt 0 view .LVU355
 1236 0012 FFF7FEFF 		bl	rt_tick_get
 1237              	.LVL119:
 564:rt_thread/src/thread.c ****     {
 1238              		.loc 1 564 25 view .LVU356
 1239 0016 2368     		ldr	r3, [r4]
 564:rt_thread/src/thread.c ****     {
 1240              		.loc 1 564 23 view .LVU357
 1241 0018 C01A     		subs	r0, r0, r3
 564:rt_thread/src/thread.c ****     {
 1242              		.loc 1 564 8 view .LVU358
 1243 001a B042     		cmp	r0, r6
 1244 001c 1DD2     		bcs	.L71
 566:rt_thread/src/thread.c **** 
 1245              		.loc 1 566 9 is_stmt 1 view .LVU359
 566:rt_thread/src/thread.c **** 
 1246              		.loc 1 566 23 is_stmt 0 view .LVU360
 1247 001e 1E44     		add	r6, r6, r3
 1248              	.LVL120:
 566:rt_thread/src/thread.c **** 
 1249              		.loc 1 566 36 view .LVU361
 1250 0020 FFF7FEFF 		bl	rt_tick_get
 1251              	.LVL121:
 566:rt_thread/src/thread.c **** 
 1252              		.loc 1 566 34 view .LVU362
 1253 0024 301A     		subs	r0, r6, r0
 566:rt_thread/src/thread.c **** 
 1254              		.loc 1 566 15 view .LVU363
 1255 0026 2060     		str	r0, [r4]
 569:rt_thread/src/thread.c **** 
 1256              		.loc 1 569 9 is_stmt 1 view .LVU364
 1257 0028 2846     		mov	r0, r5
 1258 002a FFF7FEFF 		bl	rt_thread_suspend
 1259              	.LVL122:
 572:rt_thread/src/thread.c ****         rt_timer_start(&(thread->thread_timer));
 1260              		.loc 1 572 9 view .LVU365
 1261 002e 05F14406 		add	r6, r5, #68
 1262 0032 2246     		mov	r2, r4
ARM GAS  /tmp/cc7VB9gc.s 			page 43


 1263 0034 0021     		movs	r1, #0
 1264 0036 3046     		mov	r0, r6
 1265 0038 FFF7FEFF 		bl	rt_timer_control
 1266              	.LVL123:
 573:rt_thread/src/thread.c **** 
 1267              		.loc 1 573 9 view .LVU366
 1268 003c 3046     		mov	r0, r6
 1269 003e FFF7FEFF 		bl	rt_timer_start
 1270              	.LVL124:
 576:rt_thread/src/thread.c **** 
 1271              		.loc 1 576 9 view .LVU367
 1272 0042 3846     		mov	r0, r7
 1273 0044 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1274              	.LVL125:
 578:rt_thread/src/thread.c **** 
 1275              		.loc 1 578 9 view .LVU368
 1276 0048 FFF7FEFF 		bl	rt_schedule
 1277              	.LVL126:
 581:rt_thread/src/thread.c ****         {
 1278              		.loc 1 581 9 view .LVU369
 581:rt_thread/src/thread.c ****         {
 1279              		.loc 1 581 19 is_stmt 0 view .LVU370
 1280 004c 2B6B     		ldr	r3, [r5, #48]
 581:rt_thread/src/thread.c ****         {
 1281              		.loc 1 581 12 view .LVU371
 1282 004e 13F1020F 		cmn	r3, #2
 1283 0052 05D1     		bne	.L72
 583:rt_thread/src/thread.c ****         }
 1284              		.loc 1 583 13 is_stmt 1 view .LVU372
 583:rt_thread/src/thread.c ****         }
 1285              		.loc 1 583 27 is_stmt 0 view .LVU373
 1286 0054 0023     		movs	r3, #0
 1287 0056 2B63     		str	r3, [r5, #48]
 1288 0058 02E0     		b	.L72
 1289              	.LVL127:
 1290              	.L71:
 588:rt_thread/src/thread.c ****     }
 1291              		.loc 1 588 9 is_stmt 1 view .LVU374
 1292 005a 3846     		mov	r0, r7
 1293 005c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1294              	.LVL128:
 1295              	.L72:
 592:rt_thread/src/thread.c **** 
 1296              		.loc 1 592 5 view .LVU375
 592:rt_thread/src/thread.c **** 
 1297              		.loc 1 592 13 is_stmt 0 view .LVU376
 1298 0060 FFF7FEFF 		bl	rt_tick_get
 1299              	.LVL129:
 592:rt_thread/src/thread.c **** 
 1300              		.loc 1 592 11 view .LVU377
 1301 0064 2060     		str	r0, [r4]
 594:rt_thread/src/thread.c **** }
 1302              		.loc 1 594 5 is_stmt 1 view .LVU378
 595:rt_thread/src/thread.c **** 
 1303              		.loc 1 595 1 is_stmt 0 view .LVU379
 1304 0066 0020     		movs	r0, #0
 1305 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc7VB9gc.s 			page 44


 595:rt_thread/src/thread.c **** 
 1306              		.loc 1 595 1 view .LVU380
 1307              		.cfi_endproc
 1308              	.LFE27:
 1310              		.section	.text.rt_thread_resume,"ax",%progbits
 1311              		.align	1
 1312              		.global	rt_thread_resume
 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1317              	rt_thread_resume:
 1318              	.LVL130:
 1319              	.LFB31:
 755:rt_thread/src/thread.c ****     register rt_base_t temp;
 1320              		.loc 1 755 1 is_stmt 1 view -0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 0
 1323              		@ frame_needed = 0, uses_anonymous_args = 0
 755:rt_thread/src/thread.c ****     register rt_base_t temp;
 1324              		.loc 1 755 1 is_stmt 0 view .LVU382
 1325 0000 38B5     		push	{r3, r4, r5, lr}
 1326              	.LCFI26:
 1327              		.cfi_def_cfa_offset 16
 1328              		.cfi_offset 3, -16
 1329              		.cfi_offset 4, -12
 1330              		.cfi_offset 5, -8
 1331              		.cfi_offset 14, -4
 756:rt_thread/src/thread.c **** 
 1332              		.loc 1 756 5 is_stmt 1 view .LVU383
 759:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1333              		.loc 1 759 33 view .LVU384
 760:rt_thread/src/thread.c **** 
 1334              		.loc 1 760 81 view .LVU385
 762:rt_thread/src/thread.c **** 
 1335              		.loc 1 762 74 view .LVU386
 764:rt_thread/src/thread.c ****     {
 1336              		.loc 1 764 5 view .LVU387
 764:rt_thread/src/thread.c ****     {
 1337              		.loc 1 764 16 is_stmt 0 view .LVU388
 1338 0002 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 764:rt_thread/src/thread.c ****     {
 1339              		.loc 1 764 8 view .LVU389
 1340 0006 03F00F03 		and	r3, r3, #15
 1341 000a 022B     		cmp	r3, #2
 1342 000c 18D1     		bne	.L76
 1343 000e 0446     		mov	r4, r0
 773:rt_thread/src/thread.c **** 
 1344              		.loc 1 773 5 is_stmt 1 view .LVU390
 773:rt_thread/src/thread.c **** 
 1345              		.loc 1 773 12 is_stmt 0 view .LVU391
 1346 0010 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1347              	.LVL131:
 773:rt_thread/src/thread.c **** 
 1348              		.loc 1 773 12 view .LVU392
 1349 0014 0546     		mov	r5, r0
 1350              	.LVL132:
 776:rt_thread/src/thread.c **** 
ARM GAS  /tmp/cc7VB9gc.s 			page 45


 1351              		.loc 1 776 5 is_stmt 1 view .LVU393
 1352 0016 04F11403 		add	r3, r4, #20
 1353              	.LVL133:
 1354              	.LBB32:
 1355              	.LBI32:
  86:rt_thread/include/rtservice.h **** {
 1356              		.loc 2 86 16 view .LVU394
 1357              	.LBB33:
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 1358              		.loc 2 88 5 view .LVU395
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 1359              		.loc 2 88 6 is_stmt 0 view .LVU396
 1360 001a 6169     		ldr	r1, [r4, #20]
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 1361              		.loc 2 88 22 view .LVU397
 1362 001c A269     		ldr	r2, [r4, #24]
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 1363              		.loc 2 88 19 view .LVU398
 1364 001e 4A60     		str	r2, [r1, #4]
  89:rt_thread/include/rtservice.h **** 
 1365              		.loc 2 89 5 is_stmt 1 view .LVU399
  89:rt_thread/include/rtservice.h **** 
 1366              		.loc 2 89 22 is_stmt 0 view .LVU400
 1367 0020 6169     		ldr	r1, [r4, #20]
  89:rt_thread/include/rtservice.h **** 
 1368              		.loc 2 89 19 view .LVU401
 1369 0022 1160     		str	r1, [r2]
 1370              		.loc 2 91 5 is_stmt 1 view .LVU402
 1371              		.loc 2 91 23 is_stmt 0 view .LVU403
 1372 0024 A361     		str	r3, [r4, #24]
 1373              		.loc 2 91 13 view .LVU404
 1374 0026 6361     		str	r3, [r4, #20]
 1375              	.LVL134:
 1376              		.loc 2 91 13 view .LVU405
 1377              	.LBE33:
 1378              	.LBE32:
 778:rt_thread/src/thread.c **** 
 1379              		.loc 1 778 5 is_stmt 1 view .LVU406
 1380 0028 04F14400 		add	r0, r4, #68
 1381              	.LVL135:
 778:rt_thread/src/thread.c **** 
 1382              		.loc 1 778 5 is_stmt 0 view .LVU407
 1383 002c FFF7FEFF 		bl	rt_timer_stop
 1384              	.LVL136:
 781:rt_thread/src/thread.c **** 
 1385              		.loc 1 781 5 is_stmt 1 view .LVU408
 1386 0030 2846     		mov	r0, r5
 1387 0032 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1388              	.LVL137:
 784:rt_thread/src/thread.c **** 
 1389              		.loc 1 784 5 view .LVU409
 1390 0036 2046     		mov	r0, r4
 1391 0038 FFF7FEFF 		bl	rt_schedule_insert_thread
 1392              	.LVL138:
 786:rt_thread/src/thread.c ****     return RT_EOK;
 1393              		.loc 1 786 57 view .LVU410
 787:rt_thread/src/thread.c **** }
ARM GAS  /tmp/cc7VB9gc.s 			page 46


 1394              		.loc 1 787 5 view .LVU411
 787:rt_thread/src/thread.c **** }
 1395              		.loc 1 787 12 is_stmt 0 view .LVU412
 1396 003c 0020     		movs	r0, #0
 1397              	.LVL139:
 1398              	.L74:
 788:rt_thread/src/thread.c **** 
 1399              		.loc 1 788 1 view .LVU413
 1400 003e 38BD     		pop	{r3, r4, r5, pc}
 1401              	.LVL140:
 1402              	.L76:
 769:rt_thread/src/thread.c ****     }
 1403              		.loc 1 769 16 view .LVU414
 1404 0040 4FF0FF30 		mov	r0, #-1
 1405              	.LVL141:
 769:rt_thread/src/thread.c ****     }
 1406              		.loc 1 769 16 view .LVU415
 1407 0044 FBE7     		b	.L74
 1408              		.cfi_endproc
 1409              	.LFE31:
 1411              		.section	.text.rt_thread_startup,"ax",%progbits
 1412              		.align	1
 1413              		.global	rt_thread_startup
 1414              		.syntax unified
 1415              		.thumb
 1416              		.thumb_func
 1418              	rt_thread_startup:
 1419              	.LVL142:
 1420              	.LFB20:
 267:rt_thread/src/thread.c ****     /* thread check */
 1421              		.loc 1 267 1 is_stmt 1 view -0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 267:rt_thread/src/thread.c ****     /* thread check */
 1425              		.loc 1 267 1 is_stmt 0 view .LVU417
 1426 0000 08B5     		push	{r3, lr}
 1427              	.LCFI27:
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 3, -8
 1430              		.cfi_offset 14, -4
 269:rt_thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 1431              		.loc 1 269 33 is_stmt 1 view .LVU418
 270:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1432              		.loc 1 270 70 view .LVU419
 271:rt_thread/src/thread.c **** 
 1433              		.loc 1 271 81 view .LVU420
 274:rt_thread/src/thread.c **** 
 1434              		.loc 1 274 5 view .LVU421
 274:rt_thread/src/thread.c **** 
 1435              		.loc 1 274 38 is_stmt 0 view .LVU422
 1436 0002 90F83610 		ldrb	r1, [r0, #54]	@ zero_extendqisi2
 274:rt_thread/src/thread.c **** 
 1437              		.loc 1 274 30 view .LVU423
 1438 0006 80F83510 		strb	r1, [r0, #53]
 282:rt_thread/src/thread.c **** #endif
 1439              		.loc 1 282 5 is_stmt 1 view .LVU424
ARM GAS  /tmp/cc7VB9gc.s 			page 47


 282:rt_thread/src/thread.c **** #endif
 1440              		.loc 1 282 30 is_stmt 0 view .LVU425
 1441 000a 0122     		movs	r2, #1
 1442 000c 8A40     		lsls	r2, r2, r1
 282:rt_thread/src/thread.c **** #endif
 1443              		.loc 1 282 25 view .LVU426
 1444 000e 8263     		str	r2, [r0, #56]
 286:rt_thread/src/thread.c ****     /* change thread stat */
 1445              		.loc 1 286 73 is_stmt 1 view .LVU427
 288:rt_thread/src/thread.c ****     /* then resume it */
 1446              		.loc 1 288 5 view .LVU428
 288:rt_thread/src/thread.c ****     /* then resume it */
 1447              		.loc 1 288 18 is_stmt 0 view .LVU429
 1448 0010 0222     		movs	r2, #2
 1449 0012 80F83420 		strb	r2, [r0, #52]
 290:rt_thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1450              		.loc 1 290 5 is_stmt 1 view .LVU430
 1451 0016 FFF7FEFF 		bl	rt_thread_resume
 1452              	.LVL143:
 291:rt_thread/src/thread.c ****     {
 1453              		.loc 1 291 5 view .LVU431
 291:rt_thread/src/thread.c ****     {
 1454              		.loc 1 291 9 is_stmt 0 view .LVU432
 1455 001a FFF7FEFF 		bl	rt_thread_self
 1456              	.LVL144:
 291:rt_thread/src/thread.c ****     {
 1457              		.loc 1 291 8 view .LVU433
 1458 001e 08B1     		cbz	r0, .L79
 294:rt_thread/src/thread.c ****     }
 1459              		.loc 1 294 9 is_stmt 1 view .LVU434
 1460 0020 FFF7FEFF 		bl	rt_schedule
 1461              	.LVL145:
 1462              	.L79:
 297:rt_thread/src/thread.c **** }
 1463              		.loc 1 297 5 view .LVU435
 298:rt_thread/src/thread.c **** 
 1464              		.loc 1 298 1 is_stmt 0 view .LVU436
 1465 0024 0020     		movs	r0, #0
 1466 0026 08BD     		pop	{r3, pc}
 1467              		.cfi_endproc
 1468              	.LFE20:
 1470              		.section	.text.rt_thread_control,"ax",%progbits
 1471              		.align	1
 1472              		.global	rt_thread_control
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1477              	rt_thread_control:
 1478              	.LVL146:
 1479              	.LFB29:
 627:rt_thread/src/thread.c ****     register rt_base_t temp;
 1480              		.loc 1 627 1 is_stmt 1 view -0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 627:rt_thread/src/thread.c ****     register rt_base_t temp;
 1484              		.loc 1 627 1 is_stmt 0 view .LVU438
ARM GAS  /tmp/cc7VB9gc.s 			page 48


 1485 0000 70B5     		push	{r4, r5, r6, lr}
 1486              	.LCFI28:
 1487              		.cfi_def_cfa_offset 16
 1488              		.cfi_offset 4, -16
 1489              		.cfi_offset 5, -12
 1490              		.cfi_offset 6, -8
 1491              		.cfi_offset 14, -4
 1492 0002 0446     		mov	r4, r0
 628:rt_thread/src/thread.c **** 
 1493              		.loc 1 628 5 is_stmt 1 view .LVU439
 631:rt_thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1494              		.loc 1 631 33 view .LVU440
 632:rt_thread/src/thread.c **** 
 1495              		.loc 1 632 81 view .LVU441
 634:rt_thread/src/thread.c ****     {
 1496              		.loc 1 634 5 view .LVU442
 1497 0004 0129     		cmp	r1, #1
 1498 0006 29D0     		beq	.L82
 1499 0008 1546     		mov	r5, r2
 1500 000a 0229     		cmp	r1, #2
 1501 000c 02D0     		beq	.L83
 1502 000e 11B3     		cbz	r1, .L84
 1503 0010 0020     		movs	r0, #0
 1504              	.LVL147:
 1505              	.L81:
 700:rt_thread/src/thread.c **** 
 1506              		.loc 1 700 1 is_stmt 0 view .LVU443
 1507 0012 70BD     		pop	{r4, r5, r6, pc}
 1508              	.LVL148:
 1509              	.L83:
 638:rt_thread/src/thread.c **** 
 1510              		.loc 1 638 9 is_stmt 1 view .LVU444
 638:rt_thread/src/thread.c **** 
 1511              		.loc 1 638 16 is_stmt 0 view .LVU445
 1512 0014 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1513              	.LVL149:
 638:rt_thread/src/thread.c **** 
 1514              		.loc 1 638 16 view .LVU446
 1515 0018 0646     		mov	r6, r0
 1516              	.LVL150:
 641:rt_thread/src/thread.c ****         {
 1517              		.loc 1 641 9 is_stmt 1 view .LVU447
 641:rt_thread/src/thread.c ****         {
 1518              		.loc 1 641 20 is_stmt 0 view .LVU448
 1519 001a 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 641:rt_thread/src/thread.c ****         {
 1520              		.loc 1 641 12 view .LVU449
 1521 001e 03F00F03 		and	r3, r3, #15
 1522 0022 012B     		cmp	r3, #1
 1523 0024 0AD0     		beq	.L90
 663:rt_thread/src/thread.c **** 
 1524              		.loc 1 663 13 is_stmt 1 view .LVU450
 663:rt_thread/src/thread.c **** 
 1525              		.loc 1 663 40 is_stmt 0 view .LVU451
 1526 0026 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 663:rt_thread/src/thread.c **** 
 1527              		.loc 1 663 38 view .LVU452
ARM GAS  /tmp/cc7VB9gc.s 			page 49


 1528 0028 84F83520 		strb	r2, [r4, #53]
 671:rt_thread/src/thread.c **** #endif
 1529              		.loc 1 671 13 is_stmt 1 view .LVU453
 671:rt_thread/src/thread.c **** #endif
 1530              		.loc 1 671 37 is_stmt 0 view .LVU454
 1531 002c 0123     		movs	r3, #1
 1532 002e 9340     		lsls	r3, r3, r2
 671:rt_thread/src/thread.c **** #endif
 1533              		.loc 1 671 33 view .LVU455
 1534 0030 A363     		str	r3, [r4, #56]
 1535              	.LVL151:
 1536              	.L87:
 676:rt_thread/src/thread.c ****         break;
 1537              		.loc 1 676 9 is_stmt 1 view .LVU456
 1538 0032 3046     		mov	r0, r6
 1539 0034 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1540              	.LVL152:
 677:rt_thread/src/thread.c **** 
 1541              		.loc 1 677 9 view .LVU457
 699:rt_thread/src/thread.c **** }
 1542              		.loc 1 699 12 is_stmt 0 view .LVU458
 1543 0038 0020     		movs	r0, #0
 677:rt_thread/src/thread.c **** 
 1544              		.loc 1 677 9 view .LVU459
 1545 003a EAE7     		b	.L81
 1546              	.LVL153:
 1547              	.L90:
 644:rt_thread/src/thread.c **** 
 1548              		.loc 1 644 13 is_stmt 1 view .LVU460
 1549 003c 2046     		mov	r0, r4
 1550              	.LVL154:
 644:rt_thread/src/thread.c **** 
 1551              		.loc 1 644 13 is_stmt 0 view .LVU461
 1552 003e FFF7FEFF 		bl	rt_schedule_remove_thread
 1553              	.LVL155:
 647:rt_thread/src/thread.c **** 
 1554              		.loc 1 647 13 is_stmt 1 view .LVU462
 647:rt_thread/src/thread.c **** 
 1555              		.loc 1 647 40 is_stmt 0 view .LVU463
 1556 0042 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 647:rt_thread/src/thread.c **** 
 1557              		.loc 1 647 38 view .LVU464
 1558 0044 84F83520 		strb	r2, [r4, #53]
 655:rt_thread/src/thread.c **** #endif
 1559              		.loc 1 655 13 is_stmt 1 view .LVU465
 655:rt_thread/src/thread.c **** #endif
 1560              		.loc 1 655 37 is_stmt 0 view .LVU466
 1561 0048 0123     		movs	r3, #1
 1562 004a 9340     		lsls	r3, r3, r2
 655:rt_thread/src/thread.c **** #endif
 1563              		.loc 1 655 33 view .LVU467
 1564 004c A363     		str	r3, [r4, #56]
 659:rt_thread/src/thread.c ****         }
 1565              		.loc 1 659 13 is_stmt 1 view .LVU468
 1566 004e 2046     		mov	r0, r4
 1567 0050 FFF7FEFF 		bl	rt_schedule_insert_thread
 1568              	.LVL156:
ARM GAS  /tmp/cc7VB9gc.s 			page 50


 1569 0054 EDE7     		b	.L87
 1570              	.LVL157:
 1571              	.L84:
 680:rt_thread/src/thread.c **** 
 1572              		.loc 1 680 9 view .LVU469
 680:rt_thread/src/thread.c **** 
 1573              		.loc 1 680 16 is_stmt 0 view .LVU470
 1574 0056 FFF7FEFF 		bl	rt_thread_startup
 1575              	.LVL158:
 680:rt_thread/src/thread.c **** 
 1576              		.loc 1 680 16 view .LVU471
 1577 005a DAE7     		b	.L81
 1578              	.LVL159:
 1579              	.L82:
 684:rt_thread/src/thread.c ****         {
 1580              		.loc 1 684 9 is_stmt 1 view .LVU472
 684:rt_thread/src/thread.c ****         {
 1581              		.loc 1 684 13 is_stmt 0 view .LVU473
 1582 005c FFF7FEFF 		bl	rt_object_is_systemobject
 1583              	.LVL160:
 684:rt_thread/src/thread.c ****         {
 1584              		.loc 1 684 12 view .LVU474
 1585 0060 0128     		cmp	r0, #1
 1586 0062 03D0     		beq	.L91
 691:rt_thread/src/thread.c ****         }
 1587              		.loc 1 691 13 is_stmt 1 view .LVU475
 691:rt_thread/src/thread.c ****         }
 1588              		.loc 1 691 20 is_stmt 0 view .LVU476
 1589 0064 2046     		mov	r0, r4
 1590 0066 FFF7FEFF 		bl	rt_thread_delete
 1591              	.LVL161:
 1592 006a D2E7     		b	.L81
 1593              	.L91:
 686:rt_thread/src/thread.c ****         }
 1594              		.loc 1 686 13 is_stmt 1 view .LVU477
 686:rt_thread/src/thread.c ****         }
 1595              		.loc 1 686 20 is_stmt 0 view .LVU478
 1596 006c 2046     		mov	r0, r4
 1597 006e FFF7FEFF 		bl	rt_thread_detach
 1598              	.LVL162:
 1599 0072 CEE7     		b	.L81
 1600              		.cfi_endproc
 1601              	.LFE29:
 1603              		.section	.text.rt_thread_find,"ax",%progbits
 1604              		.align	1
 1605              		.global	rt_thread_find
 1606              		.syntax unified
 1607              		.thumb
 1608              		.thumb_func
 1610              	rt_thread_find:
 1611              	.LVL163:
 1612              	.LFB33:
 819:rt_thread/src/thread.c **** 
 820:rt_thread/src/thread.c **** /**
 821:rt_thread/src/thread.c ****  * This function will find the specified thread.
 822:rt_thread/src/thread.c ****  *
 823:rt_thread/src/thread.c ****  * @param name the name of thread finding
ARM GAS  /tmp/cc7VB9gc.s 			page 51


 824:rt_thread/src/thread.c ****  *
 825:rt_thread/src/thread.c ****  * @return the found thread
 826:rt_thread/src/thread.c ****  *
 827:rt_thread/src/thread.c ****  * @note please don't invoke this function in interrupt status.
 828:rt_thread/src/thread.c ****  */
 829:rt_thread/src/thread.c **** rt_thread_t rt_thread_find(char *name)
 830:rt_thread/src/thread.c **** {
 1613              		.loc 1 830 1 is_stmt 1 view -0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		.loc 1 830 1 is_stmt 0 view .LVU480
 1618 0000 08B5     		push	{r3, lr}
 1619              	.LCFI29:
 1620              		.cfi_def_cfa_offset 8
 1621              		.cfi_offset 3, -8
 1622              		.cfi_offset 14, -4
 831:rt_thread/src/thread.c ****     return (rt_thread_t)rt_object_find(name, RT_Object_Class_Thread);
 1623              		.loc 1 831 5 is_stmt 1 view .LVU481
 1624              		.loc 1 831 25 is_stmt 0 view .LVU482
 1625 0002 0121     		movs	r1, #1
 1626 0004 FFF7FEFF 		bl	rt_object_find
 1627              	.LVL164:
 832:rt_thread/src/thread.c **** }
 1628              		.loc 1 832 1 view .LVU483
 1629 0008 08BD     		pop	{r3, pc}
 1630              		.cfi_endproc
 1631              	.LFE33:
 1633              		.text
 1634              	.Letext0:
 1635              		.file 3 "rt_thread/include/rtdef.h"
 1636              		.file 4 "rt_thread/include/rtthread.h"
 1637              		.file 5 "rt_thread/include/rthw.h"
ARM GAS  /tmp/cc7VB9gc.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 thread.c
     /tmp/cc7VB9gc.s:18     .text._thread_cleanup_execute:0000000000000000 $t
     /tmp/cc7VB9gc.s:23     .text._thread_cleanup_execute:0000000000000000 _thread_cleanup_execute
     /tmp/cc7VB9gc.s:71     .text.rt_thread_exit:0000000000000000 $t
     /tmp/cc7VB9gc.s:77     .text.rt_thread_exit:0000000000000000 rt_thread_exit
     /tmp/cc7VB9gc.s:176    .text.rt_thread_exit:0000000000000054 $d
     /tmp/cc7VB9gc.s:182    .text._rt_thread_init:0000000000000000 $t
     /tmp/cc7VB9gc.s:187    .text._rt_thread_init:0000000000000000 _rt_thread_init
     /tmp/cc7VB9gc.s:316    .text._rt_thread_init:0000000000000070 $d
     /tmp/cc7VB9gc.s:328    .text.rt_thread_timeout:0000000000000000 rt_thread_timeout
     /tmp/cc7VB9gc.s:322    .text.rt_thread_timeout:0000000000000000 $t
     /tmp/cc7VB9gc.s:389    .text.rt_thread_init:0000000000000000 $t
     /tmp/cc7VB9gc.s:395    .text.rt_thread_init:0000000000000000 rt_thread_init
     /tmp/cc7VB9gc.s:456    .text.rt_thread_self:0000000000000000 $t
     /tmp/cc7VB9gc.s:462    .text.rt_thread_self:0000000000000000 rt_thread_self
     /tmp/cc7VB9gc.s:477    .text.rt_thread_self:0000000000000008 $d
     /tmp/cc7VB9gc.s:482    .text.rt_thread_detach:0000000000000000 $t
     /tmp/cc7VB9gc.s:488    .text.rt_thread_detach:0000000000000000 rt_thread_detach
     /tmp/cc7VB9gc.s:602    .text.rt_thread_detach:0000000000000060 $d
     /tmp/cc7VB9gc.s:607    .text.rt_thread_create:0000000000000000 $t
     /tmp/cc7VB9gc.s:613    .text.rt_thread_create:0000000000000000 rt_thread_create
     /tmp/cc7VB9gc.s:710    .text.rt_thread_delete:0000000000000000 $t
     /tmp/cc7VB9gc.s:716    .text.rt_thread_delete:0000000000000000 rt_thread_delete
     /tmp/cc7VB9gc.s:816    .text.rt_thread_delete:000000000000004c $d
     /tmp/cc7VB9gc.s:821    .text.rt_thread_yield:0000000000000000 $t
     /tmp/cc7VB9gc.s:827    .text.rt_thread_yield:0000000000000000 rt_thread_yield
     /tmp/cc7VB9gc.s:941    .text.rt_thread_yield:0000000000000054 $d
     /tmp/cc7VB9gc.s:947    .text.rt_thread_suspend:0000000000000000 $t
     /tmp/cc7VB9gc.s:953    .text.rt_thread_suspend:0000000000000000 rt_thread_suspend
     /tmp/cc7VB9gc.s:1029   .text.rt_thread_sleep:0000000000000000 $t
     /tmp/cc7VB9gc.s:1035   .text.rt_thread_sleep:0000000000000000 rt_thread_sleep
     /tmp/cc7VB9gc.s:1122   .text.rt_thread_sleep:0000000000000048 $d
     /tmp/cc7VB9gc.s:1127   .text.rt_thread_delay:0000000000000000 $t
     /tmp/cc7VB9gc.s:1133   .text.rt_thread_delay:0000000000000000 rt_thread_delay
     /tmp/cc7VB9gc.s:1156   .text.rt_thread_mdelay:0000000000000000 $t
     /tmp/cc7VB9gc.s:1162   .text.rt_thread_mdelay:0000000000000000 rt_thread_mdelay
     /tmp/cc7VB9gc.s:1190   .text.rt_thread_delay_until:0000000000000000 $t
     /tmp/cc7VB9gc.s:1196   .text.rt_thread_delay_until:0000000000000000 rt_thread_delay_until
     /tmp/cc7VB9gc.s:1311   .text.rt_thread_resume:0000000000000000 $t
     /tmp/cc7VB9gc.s:1317   .text.rt_thread_resume:0000000000000000 rt_thread_resume
     /tmp/cc7VB9gc.s:1412   .text.rt_thread_startup:0000000000000000 $t
     /tmp/cc7VB9gc.s:1418   .text.rt_thread_startup:0000000000000000 rt_thread_startup
     /tmp/cc7VB9gc.s:1471   .text.rt_thread_control:0000000000000000 $t
     /tmp/cc7VB9gc.s:1477   .text.rt_thread_control:0000000000000000 rt_thread_control
     /tmp/cc7VB9gc.s:1604   .text.rt_thread_find:0000000000000000 $t
     /tmp/cc7VB9gc.s:1610   .text.rt_thread_find:0000000000000000 rt_thread_find

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_schedule_remove_thread
rt_timer_detach
rt_object_is_systemobject
rt_schedule
rt_object_detach
rt_current_thread
ARM GAS  /tmp/cc7VB9gc.s 			page 53


rt_thread_defunct
rt_memset
rt_hw_stack_init
rt_timer_init
rt_schedule_insert_thread
rt_object_init
rt_object_allocate
rt_malloc
rt_object_delete
rt_thread_priority_table
rt_timer_stop
rt_timer_control
rt_timer_start
rt_tick_from_millisecond
rt_tick_get
rt_object_find
