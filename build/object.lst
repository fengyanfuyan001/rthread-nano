ARM GAS  /tmp/cc5qvADp.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"object.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_system_object_init,"ax",%progbits
  18              		.align	1
  19              		.global	rt_system_object_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	rt_system_object_init:
  25              	.LFB15:
  26              		.file 1 "rt_thread/src/object.c"
   1:rt_thread/src/object.c **** /*
   2:rt_thread/src/object.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rt_thread/src/object.c ****  *
   4:rt_thread/src/object.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/src/object.c ****  *
   6:rt_thread/src/object.c ****  * Change Logs:
   7:rt_thread/src/object.c ****  * Date           Author       Notes
   8:rt_thread/src/object.c ****  * 2006-03-14     Bernard      the first version
   9:rt_thread/src/object.c ****  * 2006-04-21     Bernard      change the scheduler lock to interrupt lock
  10:rt_thread/src/object.c ****  * 2006-05-18     Bernard      fix the object init bug
  11:rt_thread/src/object.c ****  * 2006-08-03     Bernard      add hook support
  12:rt_thread/src/object.c ****  * 2007-01-28     Bernard      rename RT_OBJECT_Class_Static to RT_Object_Class_Static
  13:rt_thread/src/object.c ****  * 2010-10-26     yi.qiu       add module support in rt_object_allocate and rt_object_free
  14:rt_thread/src/object.c ****  * 2017-12-10     Bernard      Add object_info enum.
  15:rt_thread/src/object.c ****  * 2018-01-25     Bernard      Fix the object find issue when enable MODULE.
  16:rt_thread/src/object.c ****  */
  17:rt_thread/src/object.c **** 
  18:rt_thread/src/object.c **** #include <rtthread.h>
  19:rt_thread/src/object.c **** #include <rthw.h>
  20:rt_thread/src/object.c **** 
  21:rt_thread/src/object.c **** /*
  22:rt_thread/src/object.c ****  * define object_info for the number of rt_object_container items.
  23:rt_thread/src/object.c ****  */
  24:rt_thread/src/object.c **** enum rt_object_info_type
  25:rt_thread/src/object.c **** {
  26:rt_thread/src/object.c ****     RT_Object_Info_Thread = 0,                         /**< The object is a thread. */
  27:rt_thread/src/object.c **** #ifdef RT_USING_SEMAPHORE
  28:rt_thread/src/object.c ****     RT_Object_Info_Semaphore,                          /**< The object is a semaphore. */
  29:rt_thread/src/object.c **** #endif
  30:rt_thread/src/object.c **** #ifdef RT_USING_MUTEX
  31:rt_thread/src/object.c ****     RT_Object_Info_Mutex,                              /**< The object is a mutex. */
  32:rt_thread/src/object.c **** #endif
ARM GAS  /tmp/cc5qvADp.s 			page 2


  33:rt_thread/src/object.c **** #ifdef RT_USING_EVENT
  34:rt_thread/src/object.c ****     RT_Object_Info_Event,                              /**< The object is a event. */
  35:rt_thread/src/object.c **** #endif
  36:rt_thread/src/object.c **** #ifdef RT_USING_MAILBOX
  37:rt_thread/src/object.c ****     RT_Object_Info_MailBox,                            /**< The object is a mail box. */
  38:rt_thread/src/object.c **** #endif
  39:rt_thread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  40:rt_thread/src/object.c ****     RT_Object_Info_MessageQueue,                       /**< The object is a message queue. */
  41:rt_thread/src/object.c **** #endif
  42:rt_thread/src/object.c **** #ifdef RT_USING_MEMHEAP
  43:rt_thread/src/object.c ****     RT_Object_Info_MemHeap,                            /**< The object is a memory heap */
  44:rt_thread/src/object.c **** #endif
  45:rt_thread/src/object.c **** #ifdef RT_USING_MEMPOOL
  46:rt_thread/src/object.c ****     RT_Object_Info_MemPool,                            /**< The object is a memory pool. */
  47:rt_thread/src/object.c **** #endif
  48:rt_thread/src/object.c **** #ifdef RT_USING_DEVICE
  49:rt_thread/src/object.c ****     RT_Object_Info_Device,                             /**< The object is a device */
  50:rt_thread/src/object.c **** #endif
  51:rt_thread/src/object.c ****     RT_Object_Info_Timer,                              /**< The object is a timer. */
  52:rt_thread/src/object.c ****     RT_Object_Info_Unknown,                            /**< The object is unknown. */
  53:rt_thread/src/object.c **** };
  54:rt_thread/src/object.c **** 
  55:rt_thread/src/object.c **** #define _OBJ_CONTAINER_LIST_INIT(c)     \
  56:rt_thread/src/object.c ****     {&(rt_object_container[c].object_list), &(rt_object_container[c].object_list)}
  57:rt_thread/src/object.c **** static struct rt_object_information rt_object_container[RT_Object_Info_Unknown] =
  58:rt_thread/src/object.c **** {
  59:rt_thread/src/object.c ****     /* initialize object container - thread */
  60:rt_thread/src/object.c ****     {RT_Object_Class_Thread, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Thread), sizeof(struct rt_thre
  61:rt_thread/src/object.c **** #ifdef RT_USING_SEMAPHORE
  62:rt_thread/src/object.c ****     /* initialize object container - semaphore */
  63:rt_thread/src/object.c ****     {RT_Object_Class_Semaphore, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Semaphore), sizeof(struct r
  64:rt_thread/src/object.c **** #endif
  65:rt_thread/src/object.c **** #ifdef RT_USING_MUTEX
  66:rt_thread/src/object.c ****     /* initialize object container - mutex */
  67:rt_thread/src/object.c ****     {RT_Object_Class_Mutex, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Mutex), sizeof(struct rt_mutex)
  68:rt_thread/src/object.c **** #endif
  69:rt_thread/src/object.c **** #ifdef RT_USING_EVENT
  70:rt_thread/src/object.c ****     /* initialize object container - event */
  71:rt_thread/src/object.c ****     {RT_Object_Class_Event, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Event), sizeof(struct rt_event)
  72:rt_thread/src/object.c **** #endif
  73:rt_thread/src/object.c **** #ifdef RT_USING_MAILBOX
  74:rt_thread/src/object.c ****     /* initialize object container - mailbox */
  75:rt_thread/src/object.c ****     {RT_Object_Class_MailBox, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MailBox), sizeof(struct rt_ma
  76:rt_thread/src/object.c **** #endif
  77:rt_thread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  78:rt_thread/src/object.c ****     /* initialize object container - message queue */
  79:rt_thread/src/object.c ****     {RT_Object_Class_MessageQueue, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MessageQueue), sizeof(st
  80:rt_thread/src/object.c **** #endif
  81:rt_thread/src/object.c **** #ifdef RT_USING_MEMHEAP
  82:rt_thread/src/object.c ****     /* initialize object container - memory heap */
  83:rt_thread/src/object.c ****     {RT_Object_Class_MemHeap, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemHeap), sizeof(struct rt_me
  84:rt_thread/src/object.c **** #endif
  85:rt_thread/src/object.c **** #ifdef RT_USING_MEMPOOL
  86:rt_thread/src/object.c ****     /* initialize object container - memory pool */
  87:rt_thread/src/object.c ****     {RT_Object_Class_MemPool, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemPool), sizeof(struct rt_me
  88:rt_thread/src/object.c **** #endif
  89:rt_thread/src/object.c **** #ifdef RT_USING_DEVICE
ARM GAS  /tmp/cc5qvADp.s 			page 3


  90:rt_thread/src/object.c ****     /* initialize object container - device */
  91:rt_thread/src/object.c ****     {RT_Object_Class_Device, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Device), sizeof(struct rt_devi
  92:rt_thread/src/object.c **** #endif
  93:rt_thread/src/object.c ****     /* initialize object container - timer */
  94:rt_thread/src/object.c ****     {RT_Object_Class_Timer, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Timer), sizeof(struct rt_timer)
  95:rt_thread/src/object.c **** };
  96:rt_thread/src/object.c **** 
  97:rt_thread/src/object.c **** #ifdef RT_USING_HOOK
  98:rt_thread/src/object.c **** static void (*rt_object_attach_hook)(struct rt_object *object);
  99:rt_thread/src/object.c **** static void (*rt_object_detach_hook)(struct rt_object *object);
 100:rt_thread/src/object.c **** void (*rt_object_trytake_hook)(struct rt_object *object);
 101:rt_thread/src/object.c **** void (*rt_object_take_hook)(struct rt_object *object);
 102:rt_thread/src/object.c **** void (*rt_object_put_hook)(struct rt_object *object);
 103:rt_thread/src/object.c **** 
 104:rt_thread/src/object.c **** /**
 105:rt_thread/src/object.c ****  * @addtogroup Hook
 106:rt_thread/src/object.c ****  */
 107:rt_thread/src/object.c **** 
 108:rt_thread/src/object.c **** /**@{*/
 109:rt_thread/src/object.c **** 
 110:rt_thread/src/object.c **** /**
 111:rt_thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 112:rt_thread/src/object.c ****  * attaches to kernel object system.
 113:rt_thread/src/object.c ****  *
 114:rt_thread/src/object.c ****  * @param hook the hook function
 115:rt_thread/src/object.c ****  */
 116:rt_thread/src/object.c **** void rt_object_attach_sethook(void (*hook)(struct rt_object *object))
 117:rt_thread/src/object.c **** {
 118:rt_thread/src/object.c ****     rt_object_attach_hook = hook;
 119:rt_thread/src/object.c **** }
 120:rt_thread/src/object.c **** 
 121:rt_thread/src/object.c **** /**
 122:rt_thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 123:rt_thread/src/object.c ****  * detaches from kernel object system.
 124:rt_thread/src/object.c ****  *
 125:rt_thread/src/object.c ****  * @param hook the hook function
 126:rt_thread/src/object.c ****  */
 127:rt_thread/src/object.c **** void rt_object_detach_sethook(void (*hook)(struct rt_object *object))
 128:rt_thread/src/object.c **** {
 129:rt_thread/src/object.c ****     rt_object_detach_hook = hook;
 130:rt_thread/src/object.c **** }
 131:rt_thread/src/object.c **** 
 132:rt_thread/src/object.c **** /**
 133:rt_thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 134:rt_thread/src/object.c ****  * is taken from kernel object system.
 135:rt_thread/src/object.c ****  *
 136:rt_thread/src/object.c ****  * The object is taken means:
 137:rt_thread/src/object.c ****  * semaphore - semaphore is taken by thread
 138:rt_thread/src/object.c ****  * mutex - mutex is taken by thread
 139:rt_thread/src/object.c ****  * event - event is received by thread
 140:rt_thread/src/object.c ****  * mailbox - mail is received by thread
 141:rt_thread/src/object.c ****  * message queue - message is received by thread
 142:rt_thread/src/object.c ****  *
 143:rt_thread/src/object.c ****  * @param hook the hook function
 144:rt_thread/src/object.c ****  */
 145:rt_thread/src/object.c **** void rt_object_trytake_sethook(void (*hook)(struct rt_object *object))
 146:rt_thread/src/object.c **** {
ARM GAS  /tmp/cc5qvADp.s 			page 4


 147:rt_thread/src/object.c ****     rt_object_trytake_hook = hook;
 148:rt_thread/src/object.c **** }
 149:rt_thread/src/object.c **** 
 150:rt_thread/src/object.c **** /**
 151:rt_thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 152:rt_thread/src/object.c ****  * have been taken from kernel object system.
 153:rt_thread/src/object.c ****  *
 154:rt_thread/src/object.c ****  * The object have been taken means:
 155:rt_thread/src/object.c ****  * semaphore - semaphore have been taken by thread
 156:rt_thread/src/object.c ****  * mutex - mutex have been taken by thread
 157:rt_thread/src/object.c ****  * event - event have been received by thread
 158:rt_thread/src/object.c ****  * mailbox - mail have been received by thread
 159:rt_thread/src/object.c ****  * message queue - message have been received by thread
 160:rt_thread/src/object.c ****  * timer - timer is started
 161:rt_thread/src/object.c ****  *
 162:rt_thread/src/object.c ****  * @param hook the hook function
 163:rt_thread/src/object.c ****  */
 164:rt_thread/src/object.c **** void rt_object_take_sethook(void (*hook)(struct rt_object *object))
 165:rt_thread/src/object.c **** {
 166:rt_thread/src/object.c ****     rt_object_take_hook = hook;
 167:rt_thread/src/object.c **** }
 168:rt_thread/src/object.c **** 
 169:rt_thread/src/object.c **** /**
 170:rt_thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 171:rt_thread/src/object.c ****  * is put to kernel object system.
 172:rt_thread/src/object.c ****  *
 173:rt_thread/src/object.c ****  * @param hook the hook function
 174:rt_thread/src/object.c ****  */
 175:rt_thread/src/object.c **** void rt_object_put_sethook(void (*hook)(struct rt_object *object))
 176:rt_thread/src/object.c **** {
 177:rt_thread/src/object.c ****     rt_object_put_hook = hook;
 178:rt_thread/src/object.c **** }
 179:rt_thread/src/object.c **** 
 180:rt_thread/src/object.c **** /**@}*/
 181:rt_thread/src/object.c **** #endif
 182:rt_thread/src/object.c **** 
 183:rt_thread/src/object.c **** /**
 184:rt_thread/src/object.c ****  * @ingroup SystemInit
 185:rt_thread/src/object.c ****  *
 186:rt_thread/src/object.c ****  * This function will initialize system object management.
 187:rt_thread/src/object.c ****  *
 188:rt_thread/src/object.c ****  * @deprecated since 0.3.0, this function does not need to be invoked
 189:rt_thread/src/object.c ****  * in the system initialization.
 190:rt_thread/src/object.c ****  */
 191:rt_thread/src/object.c **** void rt_system_object_init(void)
 192:rt_thread/src/object.c **** {
  27              		.loc 1 192 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 193:rt_thread/src/object.c **** }
  32              		.loc 1 193 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE15:
  37              		.section	.text.rt_object_get_information,"ax",%progbits
ARM GAS  /tmp/cc5qvADp.s 			page 5


  38              		.align	1
  39              		.global	rt_object_get_information
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  44              	rt_object_get_information:
  45              	.LVL0:
  46              	.LFB16:
 194:rt_thread/src/object.c **** 
 195:rt_thread/src/object.c **** /**
 196:rt_thread/src/object.c ****  * @addtogroup KernelObject
 197:rt_thread/src/object.c ****  */
 198:rt_thread/src/object.c **** 
 199:rt_thread/src/object.c **** /**@{*/
 200:rt_thread/src/object.c **** 
 201:rt_thread/src/object.c **** /**
 202:rt_thread/src/object.c ****  * This function will return the specified type of object information.
 203:rt_thread/src/object.c ****  *
 204:rt_thread/src/object.c ****  * @param type the type of object, which can be
 205:rt_thread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 206:rt_thread/src/object.c ****  *
 207:rt_thread/src/object.c ****  * @return the object type information or RT_NULL
 208:rt_thread/src/object.c ****  */
 209:rt_thread/src/object.c **** struct rt_object_information *
 210:rt_thread/src/object.c **** rt_object_get_information(enum rt_object_class_type type)
 211:rt_thread/src/object.c **** {
  47              		.loc 1 211 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
 212:rt_thread/src/object.c ****     int index;
  52              		.loc 1 212 5 view .LVU3
 213:rt_thread/src/object.c **** 
 214:rt_thread/src/object.c ****     for (index = 0; index < RT_Object_Info_Unknown; index ++)
  53              		.loc 1 214 5 view .LVU4
  54              		.loc 1 214 16 is_stmt 0 view .LVU5
  55 0000 0023     		movs	r3, #0
  56              	.LVL1:
  57              	.L3:
  58              		.loc 1 214 21 is_stmt 1 discriminator 1 view .LVU6
  59              		.loc 1 214 5 is_stmt 0 discriminator 1 view .LVU7
  60 0002 032B     		cmp	r3, #3
  61 0004 09DC     		bgt	.L7
 215:rt_thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  62              		.loc 1 215 9 is_stmt 1 view .LVU8
  63              		.loc 1 215 39 is_stmt 0 view .LVU9
  64 0006 1A01     		lsls	r2, r3, #4
  65 0008 0549     		ldr	r1, .L9
  66 000a 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
  67              		.loc 1 215 12 view .LVU10
  68 000c 8242     		cmp	r2, r0
  69 000e 01D0     		beq	.L8
 214:rt_thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  70              		.loc 1 214 53 is_stmt 1 discriminator 2 view .LVU11
 214:rt_thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  71              		.loc 1 214 59 is_stmt 0 discriminator 2 view .LVU12
ARM GAS  /tmp/cc5qvADp.s 			page 6


  72 0010 0133     		adds	r3, r3, #1
  73              	.LVL2:
 214:rt_thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  74              		.loc 1 214 59 discriminator 2 view .LVU13
  75 0012 F6E7     		b	.L3
  76              	.L8:
  77              		.loc 1 215 54 is_stmt 1 discriminator 1 view .LVU14
  78              		.loc 1 215 61 is_stmt 0 discriminator 1 view .LVU15
  79 0014 01EB0310 		add	r0, r1, r3, lsl #4
  80              	.LVL3:
  81              		.loc 1 215 61 discriminator 1 view .LVU16
  82 0018 7047     		bx	lr
  83              	.LVL4:
  84              	.L7:
 216:rt_thread/src/object.c **** 
 217:rt_thread/src/object.c ****     return RT_NULL;
  85              		.loc 1 217 12 view .LVU17
  86 001a 0020     		movs	r0, #0
  87              	.LVL5:
 218:rt_thread/src/object.c **** }
  88              		.loc 1 218 1 view .LVU18
  89 001c 7047     		bx	lr
  90              	.L10:
  91 001e 00BF     		.align	2
  92              	.L9:
  93 0020 00000000 		.word	.LANCHOR0
  94              		.cfi_endproc
  95              	.LFE16:
  97              		.section	.text.rt_object_get_length,"ax",%progbits
  98              		.align	1
  99              		.global	rt_object_get_length
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	rt_object_get_length:
 105              	.LVL6:
 106              	.LFB17:
 219:rt_thread/src/object.c **** 
 220:rt_thread/src/object.c **** /**
 221:rt_thread/src/object.c ****  * This function will return the length of object list in object container.
 222:rt_thread/src/object.c ****  *
 223:rt_thread/src/object.c ****  * @param type the type of object, which can be
 224:rt_thread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 225:rt_thread/src/object.c ****  * @return the length of object list
 226:rt_thread/src/object.c ****  */
 227:rt_thread/src/object.c **** int rt_object_get_length(enum rt_object_class_type type)
 228:rt_thread/src/object.c **** {
 107              		.loc 1 228 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		.loc 1 228 1 is_stmt 0 view .LVU20
 112 0000 38B5     		push	{r3, r4, r5, lr}
 113              	.LCFI0:
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 3, -16
 116              		.cfi_offset 4, -12
ARM GAS  /tmp/cc5qvADp.s 			page 7


 117              		.cfi_offset 5, -8
 118              		.cfi_offset 14, -4
 229:rt_thread/src/object.c ****     int count = 0;
 119              		.loc 1 229 5 is_stmt 1 view .LVU21
 120              	.LVL7:
 230:rt_thread/src/object.c ****     rt_ubase_t level;
 121              		.loc 1 230 5 view .LVU22
 231:rt_thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 122              		.loc 1 231 5 view .LVU23
 232:rt_thread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 123              		.loc 1 232 5 view .LVU24
 233:rt_thread/src/object.c **** 
 234:rt_thread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 124              		.loc 1 234 5 view .LVU25
 125              		.loc 1 234 19 is_stmt 0 view .LVU26
 126 0002 FFF7FEFF 		bl	rt_object_get_information
 127              	.LVL8:
 235:rt_thread/src/object.c ****     if (information == RT_NULL) return 0;
 128              		.loc 1 235 5 is_stmt 1 view .LVU27
 129              		.loc 1 235 8 is_stmt 0 view .LVU28
 130 0006 70B1     		cbz	r0, .L15
 131 0008 0546     		mov	r5, r0
 236:rt_thread/src/object.c **** 
 237:rt_thread/src/object.c ****     level = rt_hw_interrupt_disable();
 132              		.loc 1 237 5 is_stmt 1 view .LVU29
 133              		.loc 1 237 13 is_stmt 0 view .LVU30
 134 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 135              	.LVL9:
 238:rt_thread/src/object.c ****     /* get the count of objects */
 239:rt_thread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 136              		.loc 1 239 5 is_stmt 1 view .LVU31
 137 000e 6B68     		ldr	r3, [r5, #4]
 138              	.LVL10:
 229:rt_thread/src/object.c ****     rt_ubase_t level;
 139              		.loc 1 229 9 is_stmt 0 view .LVU32
 140 0010 0024     		movs	r4, #0
 141              		.loc 1 239 5 view .LVU33
 142 0012 01E0     		b	.L13
 143              	.LVL11:
 144              	.L14:
 240:rt_thread/src/object.c ****     {
 241:rt_thread/src/object.c ****         count ++;
 145              		.loc 1 241 9 is_stmt 1 discriminator 3 view .LVU34
 146              		.loc 1 241 15 is_stmt 0 discriminator 3 view .LVU35
 147 0014 0134     		adds	r4, r4, #1
 148              	.LVL12:
 239:rt_thread/src/object.c ****     {
 149              		.loc 1 239 5 is_stmt 1 discriminator 3 view .LVU36
 150 0016 1B68     		ldr	r3, [r3]
 151              	.LVL13:
 152              	.L13:
 239:rt_thread/src/object.c ****     {
 153              		.loc 1 239 5 discriminator 1 view .LVU37
 154 0018 2A1D     		adds	r2, r5, #4
 155 001a 9A42     		cmp	r2, r3
 156 001c FAD1     		bne	.L14
 242:rt_thread/src/object.c ****     }
ARM GAS  /tmp/cc5qvADp.s 			page 8


 243:rt_thread/src/object.c ****     rt_hw_interrupt_enable(level);
 157              		.loc 1 243 5 view .LVU38
 158 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 159              	.LVL14:
 244:rt_thread/src/object.c **** 
 245:rt_thread/src/object.c ****     return count;
 160              		.loc 1 245 5 view .LVU39
 161              	.L11:
 246:rt_thread/src/object.c **** }
 162              		.loc 1 246 1 is_stmt 0 view .LVU40
 163 0022 2046     		mov	r0, r4
 164 0024 38BD     		pop	{r3, r4, r5, pc}
 165              	.LVL15:
 166              	.L15:
 235:rt_thread/src/object.c **** 
 167              		.loc 1 235 40 view .LVU41
 168 0026 0024     		movs	r4, #0
 169 0028 FBE7     		b	.L11
 170              		.cfi_endproc
 171              	.LFE17:
 173              		.section	.text.rt_object_get_pointers,"ax",%progbits
 174              		.align	1
 175              		.global	rt_object_get_pointers
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	rt_object_get_pointers:
 181              	.LVL16:
 182              	.LFB18:
 247:rt_thread/src/object.c **** 
 248:rt_thread/src/object.c **** /**
 249:rt_thread/src/object.c ****  * This function will copy the object pointer of the specified type,
 250:rt_thread/src/object.c ****  * with the maximum size specified by maxlen.
 251:rt_thread/src/object.c ****  *
 252:rt_thread/src/object.c ****  * @param type the type of object, which can be
 253:rt_thread/src/object.c ****  *             RT_Object_Class_Thread/Semaphore/Mutex... etc
 254:rt_thread/src/object.c ****  * @param pointers the pointers will be saved to
 255:rt_thread/src/object.c ****  * @param maxlen the maximum number of pointers can be saved
 256:rt_thread/src/object.c ****  *
 257:rt_thread/src/object.c ****  * @return the copied number of object pointers
 258:rt_thread/src/object.c ****  */
 259:rt_thread/src/object.c **** int rt_object_get_pointers(enum rt_object_class_type type, rt_object_t *pointers, int maxlen)
 260:rt_thread/src/object.c **** {
 183              		.loc 1 260 1 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		.loc 1 260 1 is_stmt 0 view .LVU43
 188 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 24
 191              		.cfi_offset 3, -24
 192              		.cfi_offset 4, -20
 193              		.cfi_offset 5, -16
 194              		.cfi_offset 6, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5qvADp.s 			page 9


 261:rt_thread/src/object.c ****     int index = 0;
 197              		.loc 1 261 5 is_stmt 1 view .LVU44
 198              	.LVL17:
 262:rt_thread/src/object.c ****     rt_ubase_t level;
 199              		.loc 1 262 5 view .LVU45
 263:rt_thread/src/object.c **** 
 264:rt_thread/src/object.c ****     struct rt_object *object;
 200              		.loc 1 264 5 view .LVU46
 265:rt_thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 201              		.loc 1 265 5 view .LVU47
 266:rt_thread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 202              		.loc 1 266 5 view .LVU48
 267:rt_thread/src/object.c **** 
 268:rt_thread/src/object.c ****     if (maxlen <= 0) return 0;
 203              		.loc 1 268 5 view .LVU49
 204              		.loc 1 268 8 is_stmt 0 view .LVU50
 205 0002 151E     		subs	r5, r2, #0
 206 0004 19DD     		ble	.L22
 207 0006 0E46     		mov	r6, r1
 269:rt_thread/src/object.c **** 
 270:rt_thread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 208              		.loc 1 270 5 is_stmt 1 view .LVU51
 209              		.loc 1 270 19 is_stmt 0 view .LVU52
 210 0008 FFF7FEFF 		bl	rt_object_get_information
 211              	.LVL18:
 271:rt_thread/src/object.c ****     if (information == RT_NULL) return 0;
 212              		.loc 1 271 5 is_stmt 1 view .LVU53
 213              		.loc 1 271 8 is_stmt 0 view .LVU54
 214 000c 0746     		mov	r7, r0
 215 000e B0B1     		cbz	r0, .L23
 272:rt_thread/src/object.c **** 
 273:rt_thread/src/object.c ****     level = rt_hw_interrupt_disable();
 216              		.loc 1 273 5 is_stmt 1 view .LVU55
 217              		.loc 1 273 13 is_stmt 0 view .LVU56
 218 0010 FFF7FEFF 		bl	rt_hw_interrupt_disable
 219              	.LVL19:
 274:rt_thread/src/object.c ****     /* retrieve pointer of object */
 275:rt_thread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 220              		.loc 1 275 5 is_stmt 1 view .LVU57
 221 0014 7B68     		ldr	r3, [r7, #4]
 222              	.LVL20:
 261:rt_thread/src/object.c ****     rt_ubase_t level;
 223              		.loc 1 261 9 is_stmt 0 view .LVU58
 224 0016 0024     		movs	r4, #0
 225              	.LVL21:
 226              	.L19:
 227              		.loc 1 275 5 is_stmt 1 discriminator 1 view .LVU59
 228 0018 07F1040C 		add	ip, r7, #4
 229 001c 9C45     		cmp	ip, r3
 230 001e 08D0     		beq	.L20
 276:rt_thread/src/object.c ****     {
 277:rt_thread/src/object.c ****         object = rt_list_entry(node, struct rt_object, list);
 231              		.loc 1 277 9 view .LVU60
 232              		.loc 1 277 16 is_stmt 0 view .LVU61
 233 0020 A3F10C02 		sub	r2, r3, #12
 234              	.LVL22:
 278:rt_thread/src/object.c **** 
ARM GAS  /tmp/cc5qvADp.s 			page 10


 279:rt_thread/src/object.c ****         pointers[index] = object;
 235              		.loc 1 279 9 is_stmt 1 view .LVU62
 236              		.loc 1 279 25 is_stmt 0 view .LVU63
 237 0024 46F82420 		str	r2, [r6, r4, lsl #2]
 280:rt_thread/src/object.c ****         index ++;
 238              		.loc 1 280 9 is_stmt 1 view .LVU64
 239              		.loc 1 280 15 is_stmt 0 view .LVU65
 240 0028 0134     		adds	r4, r4, #1
 241              	.LVL23:
 281:rt_thread/src/object.c **** 
 282:rt_thread/src/object.c ****         if (index >= maxlen) break;
 242              		.loc 1 282 9 is_stmt 1 view .LVU66
 243              		.loc 1 282 12 is_stmt 0 view .LVU67
 244 002a A542     		cmp	r5, r4
 245 002c 01DD     		ble	.L20
 275:rt_thread/src/object.c ****     {
 246              		.loc 1 275 5 is_stmt 1 discriminator 2 view .LVU68
 247 002e 1B68     		ldr	r3, [r3]
 248              	.LVL24:
 275:rt_thread/src/object.c ****     {
 249              		.loc 1 275 5 is_stmt 0 discriminator 2 view .LVU69
 250 0030 F2E7     		b	.L19
 251              	.LVL25:
 252              	.L20:
 283:rt_thread/src/object.c ****     }
 284:rt_thread/src/object.c ****     rt_hw_interrupt_enable(level);
 253              		.loc 1 284 5 is_stmt 1 view .LVU70
 254 0032 FFF7FEFF 		bl	rt_hw_interrupt_enable
 255              	.LVL26:
 285:rt_thread/src/object.c **** 
 286:rt_thread/src/object.c ****     return index;
 256              		.loc 1 286 5 view .LVU71
 257              	.L17:
 287:rt_thread/src/object.c **** }
 258              		.loc 1 287 1 is_stmt 0 view .LVU72
 259 0036 2046     		mov	r0, r4
 260 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 261              	.LVL27:
 262              	.L22:
 268:rt_thread/src/object.c **** 
 263              		.loc 1 268 29 view .LVU73
 264 003a 0024     		movs	r4, #0
 265 003c FBE7     		b	.L17
 266              	.LVL28:
 267              	.L23:
 271:rt_thread/src/object.c **** 
 268              		.loc 1 271 40 view .LVU74
 269 003e 0024     		movs	r4, #0
 270 0040 F9E7     		b	.L17
 271              		.cfi_endproc
 272              	.LFE18:
 274              		.section	.text.rt_object_init,"ax",%progbits
 275              		.align	1
 276              		.global	rt_object_init
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
ARM GAS  /tmp/cc5qvADp.s 			page 11


 281              	rt_object_init:
 282              	.LVL29:
 283              	.LFB19:
 288:rt_thread/src/object.c **** 
 289:rt_thread/src/object.c **** /**
 290:rt_thread/src/object.c ****  * This function will initialize an object and add it to object system
 291:rt_thread/src/object.c ****  * management.
 292:rt_thread/src/object.c ****  *
 293:rt_thread/src/object.c ****  * @param object the specified object to be initialized.
 294:rt_thread/src/object.c ****  * @param type the object type.
 295:rt_thread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 296:rt_thread/src/object.c ****  */
 297:rt_thread/src/object.c **** void rt_object_init(struct rt_object         *object,
 298:rt_thread/src/object.c ****                     enum rt_object_class_type type,
 299:rt_thread/src/object.c ****                     const char               *name)
 300:rt_thread/src/object.c **** {
 284              		.loc 1 300 1 is_stmt 1 view -0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		.loc 1 300 1 is_stmt 0 view .LVU76
 289 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 290              	.LCFI2:
 291              		.cfi_def_cfa_offset 24
 292              		.cfi_offset 4, -24
 293              		.cfi_offset 5, -20
 294              		.cfi_offset 6, -16
 295              		.cfi_offset 7, -12
 296              		.cfi_offset 8, -8
 297              		.cfi_offset 14, -4
 298 0004 0646     		mov	r6, r0
 299 0006 0F46     		mov	r7, r1
 300 0008 9046     		mov	r8, r2
 301:rt_thread/src/object.c ****     register rt_base_t temp;
 301              		.loc 1 301 5 is_stmt 1 view .LVU77
 302:rt_thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 302              		.loc 1 302 5 view .LVU78
 303              	.LVL30:
 303:rt_thread/src/object.c ****     struct rt_object_information *information;
 304              		.loc 1 303 5 view .LVU79
 304:rt_thread/src/object.c **** 
 305:rt_thread/src/object.c ****     /* get object information */
 306:rt_thread/src/object.c ****     information = rt_object_get_information(type);
 305              		.loc 1 306 5 view .LVU80
 306              		.loc 1 306 19 is_stmt 0 view .LVU81
 307 000a 0846     		mov	r0, r1
 308              	.LVL31:
 309              		.loc 1 306 19 view .LVU82
 310 000c FFF7FEFF 		bl	rt_object_get_information
 311              	.LVL32:
 312              		.loc 1 306 19 view .LVU83
 313 0010 0546     		mov	r5, r0
 314              	.LVL33:
 307:rt_thread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 315              		.loc 1 307 38 is_stmt 1 view .LVU84
 308:rt_thread/src/object.c **** 
 309:rt_thread/src/object.c ****     /* check object type to avoid re-initialization */
ARM GAS  /tmp/cc5qvADp.s 			page 12


 310:rt_thread/src/object.c **** 
 311:rt_thread/src/object.c ****     /* enter critical */
 312:rt_thread/src/object.c ****     rt_enter_critical();
 316              		.loc 1 312 5 view .LVU85
 317 0012 FFF7FEFF 		bl	rt_enter_critical
 318              	.LVL34:
 313:rt_thread/src/object.c ****     /* try to find object */
 314:rt_thread/src/object.c ****     for (node  = information->object_list.next;
 319              		.loc 1 314 5 view .LVU86
 320              		.loc 1 314 16 is_stmt 0 view .LVU87
 321 0016 6B68     		ldr	r3, [r5, #4]
 322              	.LVL35:
 323              		.loc 1 314 5 view .LVU88
 324 0018 00E0     		b	.L26
 325              	.L27:
 315:rt_thread/src/object.c ****             node != &(information->object_list);
 316:rt_thread/src/object.c ****             node  = node->next)
 317:rt_thread/src/object.c ****     {
 318:rt_thread/src/object.c ****         struct rt_object *obj;
 326              		.loc 1 318 9 is_stmt 1 view .LVU89
 319:rt_thread/src/object.c **** 
 320:rt_thread/src/object.c ****         obj = rt_list_entry(node, struct rt_object, list);
 327              		.loc 1 320 9 view .LVU90
 328              	.LVL36:
 321:rt_thread/src/object.c ****         if (obj) /* skip warning when disable debug */
 329              		.loc 1 321 9 view .LVU91
 322:rt_thread/src/object.c ****         {
 323:rt_thread/src/object.c ****             RT_ASSERT(obj != object);
 330              		.loc 1 323 37 view .LVU92
 316:rt_thread/src/object.c ****     {
 331              		.loc 1 316 13 view .LVU93
 316:rt_thread/src/object.c ****     {
 332              		.loc 1 316 19 is_stmt 0 view .LVU94
 333 001a 1B68     		ldr	r3, [r3]
 334              	.LVL37:
 335              	.L26:
 315:rt_thread/src/object.c ****             node  = node->next)
 336              		.loc 1 315 13 is_stmt 1 discriminator 1 view .LVU95
 315:rt_thread/src/object.c ****             node  = node->next)
 337              		.loc 1 315 21 is_stmt 0 discriminator 1 view .LVU96
 338 001c 2C1D     		adds	r4, r5, #4
 314:rt_thread/src/object.c ****             node != &(information->object_list);
 339              		.loc 1 314 5 discriminator 1 view .LVU97
 340 001e 9C42     		cmp	r4, r3
 341 0020 FBD1     		bne	.L27
 324:rt_thread/src/object.c ****         }
 325:rt_thread/src/object.c ****     }
 326:rt_thread/src/object.c ****     /* leave critical */
 327:rt_thread/src/object.c ****     rt_exit_critical();
 342              		.loc 1 327 5 is_stmt 1 view .LVU98
 343 0022 FFF7FEFF 		bl	rt_exit_critical
 344              	.LVL38:
 328:rt_thread/src/object.c **** 
 329:rt_thread/src/object.c ****     /* initialize object's parameters */
 330:rt_thread/src/object.c ****     /* set object type to static */
 331:rt_thread/src/object.c ****     object->type = type | RT_Object_Class_Static;
 345              		.loc 1 331 5 view .LVU99
ARM GAS  /tmp/cc5qvADp.s 			page 13


 346              		.loc 1 331 18 is_stmt 0 view .LVU100
 347 0026 67F07F07 		orn	r7, r7, #127
 348 002a 3772     		strb	r7, [r6, #8]
 332:rt_thread/src/object.c ****     /* copy name */
 333:rt_thread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 349              		.loc 1 333 5 is_stmt 1 view .LVU101
 350 002c 0822     		movs	r2, #8
 351 002e 4146     		mov	r1, r8
 352 0030 3046     		mov	r0, r6
 353 0032 FFF7FEFF 		bl	rt_strncpy
 354              	.LVL39:
 334:rt_thread/src/object.c **** 
 335:rt_thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 355              		.loc 1 335 57 view .LVU102
 336:rt_thread/src/object.c **** 
 337:rt_thread/src/object.c ****     /* lock interrupt */
 338:rt_thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 356              		.loc 1 338 5 view .LVU103
 357              		.loc 1 338 12 is_stmt 0 view .LVU104
 358 0036 FFF7FEFF 		bl	rt_hw_interrupt_disable
 359              	.LVL40:
 339:rt_thread/src/object.c **** 
 340:rt_thread/src/object.c ****     /* insert object into information object list */
 341:rt_thread/src/object.c ****     rt_list_insert_after(&(information->object_list), &(object->list));
 360              		.loc 1 341 5 is_stmt 1 view .LVU105
 361 003a 06F10C03 		add	r3, r6, #12
 362              	.LVL41:
 363              	.LBB11:
 364              	.LBI11:
 365              		.file 2 "rt_thread/include/rtservice.h"
   1:rt_thread/include/rtservice.h **** /*
   2:rt_thread/include/rtservice.h ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:rt_thread/include/rtservice.h ****  *
   4:rt_thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt_thread/include/rtservice.h ****  *
   6:rt_thread/include/rtservice.h ****  * Change Logs:
   7:rt_thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt_thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt_thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt_thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt_thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt_thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt_thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt_thread/include/rtservice.h ****  */
  15:rt_thread/include/rtservice.h **** 
  16:rt_thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt_thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt_thread/include/rtservice.h **** 
  19:rt_thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt_thread/include/rtservice.h **** extern "C" {
  21:rt_thread/include/rtservice.h **** #endif
  22:rt_thread/include/rtservice.h **** 
  23:rt_thread/include/rtservice.h **** /**
  24:rt_thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt_thread/include/rtservice.h ****  */
  26:rt_thread/include/rtservice.h **** 
  27:rt_thread/include/rtservice.h **** /**@{*/
ARM GAS  /tmp/cc5qvADp.s 			page 14


  28:rt_thread/include/rtservice.h **** 
  29:rt_thread/include/rtservice.h **** /**
  30:rt_thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt_thread/include/rtservice.h ****  * struct type.
  32:rt_thread/include/rtservice.h ****  */
  33:rt_thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt_thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt_thread/include/rtservice.h **** 
  36:rt_thread/include/rtservice.h **** 
  37:rt_thread/include/rtservice.h **** /**
  38:rt_thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt_thread/include/rtservice.h ****  */
  40:rt_thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt_thread/include/rtservice.h **** 
  42:rt_thread/include/rtservice.h **** /**
  43:rt_thread/include/rtservice.h ****  * @brief initialize a list
  44:rt_thread/include/rtservice.h ****  *
  45:rt_thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt_thread/include/rtservice.h ****  */
  47:rt_thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt_thread/include/rtservice.h **** {
  49:rt_thread/include/rtservice.h ****     l->next = l->prev = l;
  50:rt_thread/include/rtservice.h **** }
  51:rt_thread/include/rtservice.h **** 
  52:rt_thread/include/rtservice.h **** /**
  53:rt_thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt_thread/include/rtservice.h ****  *
  55:rt_thread/include/rtservice.h ****  * @param l list to insert it
  56:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt_thread/include/rtservice.h ****  */
  58:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
 366              		.loc 2 58 16 view .LVU106
 367              	.LBB12:
  59:rt_thread/include/rtservice.h **** {
  60:rt_thread/include/rtservice.h ****     l->next->prev = n;
 368              		.loc 2 60 5 view .LVU107
 369              		.loc 2 60 6 is_stmt 0 view .LVU108
 370 003e 6A68     		ldr	r2, [r5, #4]
 371              		.loc 2 60 19 view .LVU109
 372 0040 5360     		str	r3, [r2, #4]
  61:rt_thread/include/rtservice.h ****     n->next = l->next;
 373              		.loc 2 61 5 is_stmt 1 view .LVU110
 374              		.loc 2 61 16 is_stmt 0 view .LVU111
 375 0042 6A68     		ldr	r2, [r5, #4]
 376              		.loc 2 61 13 view .LVU112
 377 0044 F260     		str	r2, [r6, #12]
  62:rt_thread/include/rtservice.h **** 
  63:rt_thread/include/rtservice.h ****     l->next = n;
 378              		.loc 2 63 5 is_stmt 1 view .LVU113
 379              		.loc 2 63 13 is_stmt 0 view .LVU114
 380 0046 6B60     		str	r3, [r5, #4]
  64:rt_thread/include/rtservice.h ****     n->prev = l;
 381              		.loc 2 64 5 is_stmt 1 view .LVU115
 382              		.loc 2 64 13 is_stmt 0 view .LVU116
 383 0048 3461     		str	r4, [r6, #16]
 384              	.LVL42:
 385              		.loc 2 64 13 view .LVU117
ARM GAS  /tmp/cc5qvADp.s 			page 15


 386              	.LBE12:
 387              	.LBE11:
 342:rt_thread/src/object.c **** 
 343:rt_thread/src/object.c ****     /* unlock interrupt */
 344:rt_thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 388              		.loc 1 344 5 is_stmt 1 view .LVU118
 389 004a FFF7FEFF 		bl	rt_hw_interrupt_enable
 390              	.LVL43:
 345:rt_thread/src/object.c **** }
 391              		.loc 1 345 1 is_stmt 0 view .LVU119
 392 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 393              		.loc 1 345 1 view .LVU120
 394              		.cfi_endproc
 395              	.LFE19:
 397              		.section	.text.rt_object_detach,"ax",%progbits
 398              		.align	1
 399              		.global	rt_object_detach
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 404              	rt_object_detach:
 405              	.LVL44:
 406              	.LFB20:
 346:rt_thread/src/object.c **** 
 347:rt_thread/src/object.c **** /**
 348:rt_thread/src/object.c ****  * This function will detach a static object from object system,
 349:rt_thread/src/object.c ****  * and the memory of static object is not freed.
 350:rt_thread/src/object.c ****  *
 351:rt_thread/src/object.c ****  * @param object the specified object to be detached.
 352:rt_thread/src/object.c ****  */
 353:rt_thread/src/object.c **** void rt_object_detach(rt_object_t object)
 354:rt_thread/src/object.c **** {
 407              		.loc 1 354 1 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		.loc 1 354 1 is_stmt 0 view .LVU122
 412 0000 10B5     		push	{r4, lr}
 413              	.LCFI3:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 4, -8
 416              		.cfi_offset 14, -4
 417 0002 0446     		mov	r4, r0
 355:rt_thread/src/object.c ****     register rt_base_t temp;
 418              		.loc 1 355 5 is_stmt 1 view .LVU123
 356:rt_thread/src/object.c **** 
 357:rt_thread/src/object.c ****     /* object check */
 358:rt_thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 419              		.loc 1 358 33 view .LVU124
 359:rt_thread/src/object.c **** 
 360:rt_thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 420              		.loc 1 360 57 view .LVU125
 361:rt_thread/src/object.c **** 
 362:rt_thread/src/object.c ****     /* reset object type */
 363:rt_thread/src/object.c ****     object->type = 0;
 421              		.loc 1 363 5 view .LVU126
 422              		.loc 1 363 18 is_stmt 0 view .LVU127
ARM GAS  /tmp/cc5qvADp.s 			page 16


 423 0004 0023     		movs	r3, #0
 424 0006 0372     		strb	r3, [r0, #8]
 364:rt_thread/src/object.c **** 
 365:rt_thread/src/object.c ****     /* lock interrupt */
 366:rt_thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 425              		.loc 1 366 5 is_stmt 1 view .LVU128
 426              		.loc 1 366 12 is_stmt 0 view .LVU129
 427 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 428              	.LVL45:
 367:rt_thread/src/object.c **** 
 368:rt_thread/src/object.c ****     /* remove from old list */
 369:rt_thread/src/object.c ****     rt_list_remove(&(object->list));
 429              		.loc 1 369 5 is_stmt 1 view .LVU130
 430 000c 04F10C03 		add	r3, r4, #12
 431              	.LVL46:
 432              	.LBB13:
 433              	.LBI13:
  65:rt_thread/include/rtservice.h **** }
  66:rt_thread/include/rtservice.h **** 
  67:rt_thread/include/rtservice.h **** /**
  68:rt_thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt_thread/include/rtservice.h ****  *
  70:rt_thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt_thread/include/rtservice.h ****  * @param l list to insert it
  72:rt_thread/include/rtservice.h ****  */
  73:rt_thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt_thread/include/rtservice.h **** {
  75:rt_thread/include/rtservice.h ****     l->prev->next = n;
  76:rt_thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt_thread/include/rtservice.h **** 
  78:rt_thread/include/rtservice.h ****     l->prev = n;
  79:rt_thread/include/rtservice.h ****     n->next = l;
  80:rt_thread/include/rtservice.h **** }
  81:rt_thread/include/rtservice.h **** 
  82:rt_thread/include/rtservice.h **** /**
  83:rt_thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt_thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt_thread/include/rtservice.h ****  */
  86:rt_thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
 434              		.loc 2 86 16 view .LVU131
 435              	.LBB14:
  87:rt_thread/include/rtservice.h **** {
  88:rt_thread/include/rtservice.h ****     n->next->prev = n->prev;
 436              		.loc 2 88 5 view .LVU132
 437              		.loc 2 88 6 is_stmt 0 view .LVU133
 438 0010 E168     		ldr	r1, [r4, #12]
 439              		.loc 2 88 22 view .LVU134
 440 0012 2269     		ldr	r2, [r4, #16]
 441              		.loc 2 88 19 view .LVU135
 442 0014 4A60     		str	r2, [r1, #4]
  89:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 443              		.loc 2 89 5 is_stmt 1 view .LVU136
 444              		.loc 2 89 22 is_stmt 0 view .LVU137
 445 0016 E168     		ldr	r1, [r4, #12]
 446              		.loc 2 89 19 view .LVU138
 447 0018 1160     		str	r1, [r2]
  90:rt_thread/include/rtservice.h **** 
ARM GAS  /tmp/cc5qvADp.s 			page 17


  91:rt_thread/include/rtservice.h ****     n->next = n->prev = n;
 448              		.loc 2 91 5 is_stmt 1 view .LVU139
 449              		.loc 2 91 23 is_stmt 0 view .LVU140
 450 001a 2361     		str	r3, [r4, #16]
 451              		.loc 2 91 13 view .LVU141
 452 001c E360     		str	r3, [r4, #12]
 453              	.LVL47:
 454              		.loc 2 91 13 view .LVU142
 455              	.LBE14:
 456              	.LBE13:
 370:rt_thread/src/object.c **** 
 371:rt_thread/src/object.c ****     /* unlock interrupt */
 372:rt_thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 457              		.loc 1 372 5 is_stmt 1 view .LVU143
 458 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 459              	.LVL48:
 373:rt_thread/src/object.c **** }
 460              		.loc 1 373 1 is_stmt 0 view .LVU144
 461 0022 10BD     		pop	{r4, pc}
 462              		.loc 1 373 1 view .LVU145
 463              		.cfi_endproc
 464              	.LFE20:
 466              		.section	.text.rt_object_allocate,"ax",%progbits
 467              		.align	1
 468              		.global	rt_object_allocate
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	rt_object_allocate:
 474              	.LVL49:
 475              	.LFB21:
 374:rt_thread/src/object.c **** 
 375:rt_thread/src/object.c **** #ifdef RT_USING_HEAP
 376:rt_thread/src/object.c **** /**
 377:rt_thread/src/object.c ****  * This function will allocate an object from object system
 378:rt_thread/src/object.c ****  *
 379:rt_thread/src/object.c ****  * @param type the type of object
 380:rt_thread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 381:rt_thread/src/object.c ****  *
 382:rt_thread/src/object.c ****  * @return object
 383:rt_thread/src/object.c ****  */
 384:rt_thread/src/object.c **** rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
 385:rt_thread/src/object.c **** {
 476              		.loc 1 385 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		.loc 1 385 1 is_stmt 0 view .LVU147
 481 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 482              	.LCFI4:
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 3, -24
 485              		.cfi_offset 4, -20
 486              		.cfi_offset 5, -16
 487              		.cfi_offset 6, -12
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5qvADp.s 			page 18


 490 0002 0746     		mov	r7, r0
 491 0004 0E46     		mov	r6, r1
 386:rt_thread/src/object.c ****     struct rt_object *object;
 492              		.loc 1 386 5 is_stmt 1 view .LVU148
 387:rt_thread/src/object.c ****     register rt_base_t temp;
 493              		.loc 1 387 5 view .LVU149
 388:rt_thread/src/object.c ****     struct rt_object_information *information;
 494              		.loc 1 388 5 view .LVU150
 389:rt_thread/src/object.c **** 
 390:rt_thread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 495              		.loc 1 390 30 view .LVU151
 391:rt_thread/src/object.c **** 
 392:rt_thread/src/object.c ****     /* get object information */
 393:rt_thread/src/object.c ****     information = rt_object_get_information(type);
 496              		.loc 1 393 5 view .LVU152
 497              		.loc 1 393 19 is_stmt 0 view .LVU153
 498 0006 FFF7FEFF 		bl	rt_object_get_information
 499              	.LVL50:
 500              		.loc 1 393 19 view .LVU154
 501 000a 0446     		mov	r4, r0
 502              	.LVL51:
 394:rt_thread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 503              		.loc 1 394 38 is_stmt 1 view .LVU155
 395:rt_thread/src/object.c **** 
 396:rt_thread/src/object.c ****     object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
 504              		.loc 1 396 5 view .LVU156
 505              		.loc 1 396 34 is_stmt 0 view .LVU157
 506 000c C068     		ldr	r0, [r0, #12]
 507              	.LVL52:
 508              		.loc 1 396 34 view .LVU158
 509 000e FFF7FEFF 		bl	rt_malloc
 510              	.LVL53:
 397:rt_thread/src/object.c ****     if (object == RT_NULL)
 511              		.loc 1 397 5 is_stmt 1 view .LVU159
 512              		.loc 1 397 8 is_stmt 0 view .LVU160
 513 0012 0546     		mov	r5, r0
 514 0014 C0B1     		cbz	r0, .L31
 398:rt_thread/src/object.c ****     {
 399:rt_thread/src/object.c ****         /* no memory can be allocated */
 400:rt_thread/src/object.c ****         return RT_NULL;
 401:rt_thread/src/object.c ****     }
 402:rt_thread/src/object.c **** 
 403:rt_thread/src/object.c ****     /* clean memory data of object */
 404:rt_thread/src/object.c ****     rt_memset(object, 0x0, information->object_size);
 515              		.loc 1 404 5 is_stmt 1 view .LVU161
 516 0016 E268     		ldr	r2, [r4, #12]
 517 0018 0021     		movs	r1, #0
 518 001a FFF7FEFF 		bl	rt_memset
 519              	.LVL54:
 405:rt_thread/src/object.c **** 
 406:rt_thread/src/object.c ****     /* initialize object's parameters */
 407:rt_thread/src/object.c **** 
 408:rt_thread/src/object.c ****     /* set object type */
 409:rt_thread/src/object.c ****     object->type = type;
 520              		.loc 1 409 5 view .LVU162
 521              		.loc 1 409 18 is_stmt 0 view .LVU163
 522 001e 2F72     		strb	r7, [r5, #8]
ARM GAS  /tmp/cc5qvADp.s 			page 19


 410:rt_thread/src/object.c **** 
 411:rt_thread/src/object.c ****     /* set object flag */
 412:rt_thread/src/object.c ****     object->flag = 0;
 523              		.loc 1 412 5 is_stmt 1 view .LVU164
 524              		.loc 1 412 18 is_stmt 0 view .LVU165
 525 0020 0023     		movs	r3, #0
 526 0022 6B72     		strb	r3, [r5, #9]
 413:rt_thread/src/object.c **** 
 414:rt_thread/src/object.c ****     /* copy name */
 415:rt_thread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 527              		.loc 1 415 5 is_stmt 1 view .LVU166
 528 0024 0822     		movs	r2, #8
 529 0026 3146     		mov	r1, r6
 530 0028 2846     		mov	r0, r5
 531 002a FFF7FEFF 		bl	rt_strncpy
 532              	.LVL55:
 416:rt_thread/src/object.c **** 
 417:rt_thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 533              		.loc 1 417 57 view .LVU167
 418:rt_thread/src/object.c **** 
 419:rt_thread/src/object.c ****     /* lock interrupt */
 420:rt_thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 534              		.loc 1 420 5 view .LVU168
 535              		.loc 1 420 12 is_stmt 0 view .LVU169
 536 002e FFF7FEFF 		bl	rt_hw_interrupt_disable
 537              	.LVL56:
 421:rt_thread/src/object.c **** 
 422:rt_thread/src/object.c ****     /* insert object into information object list */
 423:rt_thread/src/object.c ****     rt_list_insert_after(&(information->object_list), &(object->list));
 538              		.loc 1 423 5 is_stmt 1 view .LVU170
 539 0032 221D     		adds	r2, r4, #4
 540 0034 05F10C03 		add	r3, r5, #12
 541              	.LVL57:
 542              	.LBB15:
 543              	.LBI15:
  58:rt_thread/include/rtservice.h **** {
 544              		.loc 2 58 16 view .LVU171
 545              	.LBB16:
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 546              		.loc 2 60 5 view .LVU172
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 547              		.loc 2 60 6 is_stmt 0 view .LVU173
 548 0038 6168     		ldr	r1, [r4, #4]
  60:rt_thread/include/rtservice.h ****     n->next = l->next;
 549              		.loc 2 60 19 view .LVU174
 550 003a 4B60     		str	r3, [r1, #4]
  61:rt_thread/include/rtservice.h **** 
 551              		.loc 2 61 5 is_stmt 1 view .LVU175
  61:rt_thread/include/rtservice.h **** 
 552              		.loc 2 61 16 is_stmt 0 view .LVU176
 553 003c 6168     		ldr	r1, [r4, #4]
  61:rt_thread/include/rtservice.h **** 
 554              		.loc 2 61 13 view .LVU177
 555 003e E960     		str	r1, [r5, #12]
  63:rt_thread/include/rtservice.h ****     n->prev = l;
 556              		.loc 2 63 5 is_stmt 1 view .LVU178
  63:rt_thread/include/rtservice.h ****     n->prev = l;
ARM GAS  /tmp/cc5qvADp.s 			page 20


 557              		.loc 2 63 13 is_stmt 0 view .LVU179
 558 0040 6360     		str	r3, [r4, #4]
  64:rt_thread/include/rtservice.h **** }
 559              		.loc 2 64 5 is_stmt 1 view .LVU180
  64:rt_thread/include/rtservice.h **** }
 560              		.loc 2 64 13 is_stmt 0 view .LVU181
 561 0042 2A61     		str	r2, [r5, #16]
 562              	.LVL58:
  64:rt_thread/include/rtservice.h **** }
 563              		.loc 2 64 13 view .LVU182
 564              	.LBE16:
 565              	.LBE15:
 424:rt_thread/src/object.c **** 
 425:rt_thread/src/object.c ****     /* unlock interrupt */
 426:rt_thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 566              		.loc 1 426 5 is_stmt 1 view .LVU183
 567 0044 FFF7FEFF 		bl	rt_hw_interrupt_enable
 568              	.LVL59:
 427:rt_thread/src/object.c **** 
 428:rt_thread/src/object.c ****     /* return object */
 429:rt_thread/src/object.c ****     return object;
 569              		.loc 1 429 5 view .LVU184
 570              	.L31:
 430:rt_thread/src/object.c **** }
 571              		.loc 1 430 1 is_stmt 0 view .LVU185
 572 0048 2846     		mov	r0, r5
 573 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 574              		.loc 1 430 1 view .LVU186
 575              		.cfi_endproc
 576              	.LFE21:
 578              		.section	.text.rt_object_delete,"ax",%progbits
 579              		.align	1
 580              		.global	rt_object_delete
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 585              	rt_object_delete:
 586              	.LVL60:
 587              	.LFB22:
 431:rt_thread/src/object.c **** 
 432:rt_thread/src/object.c **** /**
 433:rt_thread/src/object.c ****  * This function will delete an object and release object memory.
 434:rt_thread/src/object.c ****  *
 435:rt_thread/src/object.c ****  * @param object the specified object to be deleted.
 436:rt_thread/src/object.c ****  */
 437:rt_thread/src/object.c **** void rt_object_delete(rt_object_t object)
 438:rt_thread/src/object.c **** {
 588              		.loc 1 438 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		.loc 1 438 1 is_stmt 0 view .LVU188
 593 0000 10B5     		push	{r4, lr}
 594              	.LCFI5:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 4, -8
 597              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5qvADp.s 			page 21


 598 0002 0446     		mov	r4, r0
 439:rt_thread/src/object.c ****     register rt_base_t temp;
 599              		.loc 1 439 5 is_stmt 1 view .LVU189
 440:rt_thread/src/object.c **** 
 441:rt_thread/src/object.c ****     /* object check */
 442:rt_thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 600              		.loc 1 442 33 view .LVU190
 443:rt_thread/src/object.c ****     RT_ASSERT(!(object->type & RT_Object_Class_Static));
 601              		.loc 1 443 56 view .LVU191
 444:rt_thread/src/object.c **** 
 445:rt_thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 602              		.loc 1 445 57 view .LVU192
 446:rt_thread/src/object.c **** 
 447:rt_thread/src/object.c ****     /* reset object type */
 448:rt_thread/src/object.c ****     object->type = RT_Object_Class_Null;
 603              		.loc 1 448 5 view .LVU193
 604              		.loc 1 448 18 is_stmt 0 view .LVU194
 605 0004 0023     		movs	r3, #0
 606 0006 0372     		strb	r3, [r0, #8]
 449:rt_thread/src/object.c **** 
 450:rt_thread/src/object.c ****     /* lock interrupt */
 451:rt_thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 607              		.loc 1 451 5 is_stmt 1 view .LVU195
 608              		.loc 1 451 12 is_stmt 0 view .LVU196
 609 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 610              	.LVL61:
 452:rt_thread/src/object.c **** 
 453:rt_thread/src/object.c ****     /* remove from old list */
 454:rt_thread/src/object.c ****     rt_list_remove(&(object->list));
 611              		.loc 1 454 5 is_stmt 1 view .LVU197
 612 000c 04F10C03 		add	r3, r4, #12
 613              	.LVL62:
 614              	.LBB17:
 615              	.LBI17:
  86:rt_thread/include/rtservice.h **** {
 616              		.loc 2 86 16 view .LVU198
 617              	.LBB18:
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 618              		.loc 2 88 5 view .LVU199
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 619              		.loc 2 88 6 is_stmt 0 view .LVU200
 620 0010 E168     		ldr	r1, [r4, #12]
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 621              		.loc 2 88 22 view .LVU201
 622 0012 2269     		ldr	r2, [r4, #16]
  88:rt_thread/include/rtservice.h ****     n->prev->next = n->next;
 623              		.loc 2 88 19 view .LVU202
 624 0014 4A60     		str	r2, [r1, #4]
  89:rt_thread/include/rtservice.h **** 
 625              		.loc 2 89 5 is_stmt 1 view .LVU203
  89:rt_thread/include/rtservice.h **** 
 626              		.loc 2 89 22 is_stmt 0 view .LVU204
 627 0016 E168     		ldr	r1, [r4, #12]
  89:rt_thread/include/rtservice.h **** 
 628              		.loc 2 89 19 view .LVU205
 629 0018 1160     		str	r1, [r2]
 630              		.loc 2 91 5 is_stmt 1 view .LVU206
ARM GAS  /tmp/cc5qvADp.s 			page 22


 631              		.loc 2 91 23 is_stmt 0 view .LVU207
 632 001a 2361     		str	r3, [r4, #16]
 633              		.loc 2 91 13 view .LVU208
 634 001c E360     		str	r3, [r4, #12]
 635              	.LVL63:
 636              		.loc 2 91 13 view .LVU209
 637              	.LBE18:
 638              	.LBE17:
 455:rt_thread/src/object.c **** 
 456:rt_thread/src/object.c ****     /* unlock interrupt */
 457:rt_thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 639              		.loc 1 457 5 is_stmt 1 view .LVU210
 640 001e FFF7FEFF 		bl	rt_hw_interrupt_enable
 641              	.LVL64:
 458:rt_thread/src/object.c **** 
 459:rt_thread/src/object.c ****     /* free the memory of object */
 460:rt_thread/src/object.c ****     RT_KERNEL_FREE(object);
 642              		.loc 1 460 5 view .LVU211
 643 0022 2046     		mov	r0, r4
 644 0024 FFF7FEFF 		bl	rt_free
 645              	.LVL65:
 461:rt_thread/src/object.c **** }
 646              		.loc 1 461 1 is_stmt 0 view .LVU212
 647 0028 10BD     		pop	{r4, pc}
 648              		.loc 1 461 1 view .LVU213
 649              		.cfi_endproc
 650              	.LFE22:
 652              		.section	.text.rt_object_is_systemobject,"ax",%progbits
 653              		.align	1
 654              		.global	rt_object_is_systemobject
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 659              	rt_object_is_systemobject:
 660              	.LVL66:
 661              	.LFB23:
 462:rt_thread/src/object.c **** #endif
 463:rt_thread/src/object.c **** 
 464:rt_thread/src/object.c **** /**
 465:rt_thread/src/object.c ****  * This function will judge the object is system object or not.
 466:rt_thread/src/object.c ****  * Normally, the system object is a static object and the type
 467:rt_thread/src/object.c ****  * of object set to RT_Object_Class_Static.
 468:rt_thread/src/object.c ****  *
 469:rt_thread/src/object.c ****  * @param object the specified object to be judged.
 470:rt_thread/src/object.c ****  *
 471:rt_thread/src/object.c ****  * @return RT_TRUE if a system object, RT_FALSE for others.
 472:rt_thread/src/object.c ****  */
 473:rt_thread/src/object.c **** rt_bool_t rt_object_is_systemobject(rt_object_t object)
 474:rt_thread/src/object.c **** {
 662              		.loc 1 474 1 is_stmt 1 view -0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 475:rt_thread/src/object.c ****     /* object check */
 476:rt_thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 667              		.loc 1 476 33 view .LVU215
ARM GAS  /tmp/cc5qvADp.s 			page 23


 477:rt_thread/src/object.c **** 
 478:rt_thread/src/object.c ****     if (object->type & RT_Object_Class_Static)
 668              		.loc 1 478 5 view .LVU216
 669              		.loc 1 478 9 is_stmt 0 view .LVU217
 670 0000 90F90830 		ldrsb	r3, [r0, #8]
 671              		.loc 1 478 8 view .LVU218
 672 0004 002B     		cmp	r3, #0
 673 0006 01DB     		blt	.L38
 479:rt_thread/src/object.c ****         return RT_TRUE;
 480:rt_thread/src/object.c **** 
 481:rt_thread/src/object.c ****     return RT_FALSE;
 674              		.loc 1 481 12 view .LVU219
 675 0008 0020     		movs	r0, #0
 676              	.LVL67:
 677              		.loc 1 481 12 view .LVU220
 678 000a 7047     		bx	lr
 679              	.LVL68:
 680              	.L38:
 479:rt_thread/src/object.c ****         return RT_TRUE;
 681              		.loc 1 479 16 view .LVU221
 682 000c 0120     		movs	r0, #1
 683              	.LVL69:
 482:rt_thread/src/object.c **** }
 684              		.loc 1 482 1 view .LVU222
 685 000e 7047     		bx	lr
 686              		.cfi_endproc
 687              	.LFE23:
 689              		.section	.text.rt_object_get_type,"ax",%progbits
 690              		.align	1
 691              		.global	rt_object_get_type
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 696              	rt_object_get_type:
 697              	.LVL70:
 698              	.LFB24:
 483:rt_thread/src/object.c **** 
 484:rt_thread/src/object.c **** /**
 485:rt_thread/src/object.c ****  * This function will return the type of object without
 486:rt_thread/src/object.c ****  * RT_Object_Class_Static flag.
 487:rt_thread/src/object.c ****  *
 488:rt_thread/src/object.c ****  * @param object the specified object to be get type.
 489:rt_thread/src/object.c ****  *
 490:rt_thread/src/object.c ****  * @return the type of object.
 491:rt_thread/src/object.c ****  */
 492:rt_thread/src/object.c **** rt_uint8_t rt_object_get_type(rt_object_t object)
 493:rt_thread/src/object.c **** {
 699              		.loc 1 493 1 is_stmt 1 view -0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 494:rt_thread/src/object.c ****     /* object check */
 495:rt_thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 704              		.loc 1 495 33 view .LVU224
 496:rt_thread/src/object.c **** 
 497:rt_thread/src/object.c ****     return object->type & ~RT_Object_Class_Static;
ARM GAS  /tmp/cc5qvADp.s 			page 24


 705              		.loc 1 497 5 view .LVU225
 706              		.loc 1 497 18 is_stmt 0 view .LVU226
 707 0000 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 708              	.LVL71:
 498:rt_thread/src/object.c **** }
 709              		.loc 1 498 1 view .LVU227
 710 0002 00F07F00 		and	r0, r0, #127
 711 0006 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE24:
 715              		.section	.text.rt_object_find,"ax",%progbits
 716              		.align	1
 717              		.global	rt_object_find
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 722              	rt_object_find:
 723              	.LVL72:
 724              	.LFB25:
 499:rt_thread/src/object.c **** 
 500:rt_thread/src/object.c **** /**
 501:rt_thread/src/object.c ****  * This function will find specified name object from object
 502:rt_thread/src/object.c ****  * container.
 503:rt_thread/src/object.c ****  *
 504:rt_thread/src/object.c ****  * @param name the specified name of object.
 505:rt_thread/src/object.c ****  * @param type the type of object
 506:rt_thread/src/object.c ****  *
 507:rt_thread/src/object.c ****  * @return the found object or RT_NULL if there is no this object
 508:rt_thread/src/object.c ****  * in object container.
 509:rt_thread/src/object.c ****  *
 510:rt_thread/src/object.c ****  * @note this function shall not be invoked in interrupt status.
 511:rt_thread/src/object.c ****  */
 512:rt_thread/src/object.c **** rt_object_t rt_object_find(const char *name, rt_uint8_t type)
 513:rt_thread/src/object.c **** {
 725              		.loc 1 513 1 is_stmt 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		.loc 1 513 1 is_stmt 0 view .LVU229
 730 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 731              	.LCFI6:
 732              		.cfi_def_cfa_offset 24
 733              		.cfi_offset 3, -24
 734              		.cfi_offset 4, -20
 735              		.cfi_offset 5, -16
 736              		.cfi_offset 6, -12
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 0746     		mov	r7, r0
 514:rt_thread/src/object.c ****     struct rt_object *object = RT_NULL;
 740              		.loc 1 514 5 is_stmt 1 view .LVU230
 741              	.LVL73:
 515:rt_thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 742              		.loc 1 515 5 view .LVU231
 516:rt_thread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 743              		.loc 1 516 5 view .LVU232
 517:rt_thread/src/object.c **** 
ARM GAS  /tmp/cc5qvADp.s 			page 25


 518:rt_thread/src/object.c ****     information = rt_object_get_information((enum rt_object_class_type)type);
 744              		.loc 1 518 5 view .LVU233
 745              		.loc 1 518 19 is_stmt 0 view .LVU234
 746 0004 0846     		mov	r0, r1
 747              	.LVL74:
 748              		.loc 1 518 19 view .LVU235
 749 0006 FFF7FEFF 		bl	rt_object_get_information
 750              	.LVL75:
 519:rt_thread/src/object.c **** 
 520:rt_thread/src/object.c ****     /* parameter check */
 521:rt_thread/src/object.c ****     if ((name == RT_NULL) || (information == RT_NULL)) return RT_NULL;
 751              		.loc 1 521 5 is_stmt 1 view .LVU236
 752              		.loc 1 521 8 is_stmt 0 view .LVU237
 753 000a CFB1     		cbz	r7, .L45
 754 000c 0646     		mov	r6, r0
 755              		.loc 1 521 27 discriminator 2 view .LVU238
 756 000e C8B1     		cbz	r0, .L46
 522:rt_thread/src/object.c **** 
 523:rt_thread/src/object.c ****     /* which is invoke in interrupt status */
 524:rt_thread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 757              		.loc 1 524 30 is_stmt 1 view .LVU239
 525:rt_thread/src/object.c **** 
 526:rt_thread/src/object.c ****     /* enter critical */
 527:rt_thread/src/object.c ****     rt_enter_critical();
 758              		.loc 1 527 5 view .LVU240
 759 0010 FFF7FEFF 		bl	rt_enter_critical
 760              	.LVL76:
 528:rt_thread/src/object.c **** 
 529:rt_thread/src/object.c ****     /* try to find object */
 530:rt_thread/src/object.c ****     rt_list_for_each(node, &(information->object_list))
 761              		.loc 1 530 5 view .LVU241
 762 0014 7468     		ldr	r4, [r6, #4]
 763              	.LVL77:
 764              	.L42:
 765              		.loc 1 530 5 discriminator 1 view .LVU242
 766 0016 331D     		adds	r3, r6, #4
 767 0018 A342     		cmp	r3, r4
 768 001a 0CD0     		beq	.L48
 531:rt_thread/src/object.c ****     {
 532:rt_thread/src/object.c ****         object = rt_list_entry(node, struct rt_object, list);
 769              		.loc 1 532 9 view .LVU243
 770              		.loc 1 532 16 is_stmt 0 view .LVU244
 771 001c A4F10C05 		sub	r5, r4, #12
 772              	.LVL78:
 533:rt_thread/src/object.c ****         if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
 773              		.loc 1 533 9 is_stmt 1 view .LVU245
 774              		.loc 1 533 13 is_stmt 0 view .LVU246
 775 0020 0822     		movs	r2, #8
 776 0022 3946     		mov	r1, r7
 777 0024 2846     		mov	r0, r5
 778 0026 FFF7FEFF 		bl	rt_strncmp
 779              	.LVL79:
 780              		.loc 1 533 12 view .LVU247
 781 002a 08B1     		cbz	r0, .L49
 530:rt_thread/src/object.c ****     {
 782              		.loc 1 530 5 is_stmt 1 discriminator 2 view .LVU248
 783 002c 2468     		ldr	r4, [r4]
ARM GAS  /tmp/cc5qvADp.s 			page 26


 784              	.LVL80:
 530:rt_thread/src/object.c ****     {
 785              		.loc 1 530 5 is_stmt 0 discriminator 2 view .LVU249
 786 002e F2E7     		b	.L42
 787              	.L49:
 534:rt_thread/src/object.c ****         {
 535:rt_thread/src/object.c ****             /* leave critical */
 536:rt_thread/src/object.c ****             rt_exit_critical();
 788              		.loc 1 536 13 is_stmt 1 view .LVU250
 789 0030 FFF7FEFF 		bl	rt_exit_critical
 790              	.LVL81:
 537:rt_thread/src/object.c **** 
 538:rt_thread/src/object.c ****             return object;
 791              		.loc 1 538 13 view .LVU251
 792              		.loc 1 538 20 is_stmt 0 view .LVU252
 793 0034 02E0     		b	.L40
 794              	.LVL82:
 795              	.L48:
 539:rt_thread/src/object.c ****         }
 540:rt_thread/src/object.c ****     }
 541:rt_thread/src/object.c **** 
 542:rt_thread/src/object.c ****     /* leave critical */
 543:rt_thread/src/object.c ****     rt_exit_critical();
 796              		.loc 1 543 5 is_stmt 1 view .LVU253
 797 0036 FFF7FEFF 		bl	rt_exit_critical
 798              	.LVL83:
 544:rt_thread/src/object.c **** 
 545:rt_thread/src/object.c ****     return RT_NULL;
 799              		.loc 1 545 5 view .LVU254
 800              		.loc 1 545 12 is_stmt 0 view .LVU255
 801 003a 0025     		movs	r5, #0
 802              	.LVL84:
 803              	.L40:
 546:rt_thread/src/object.c **** }
 804              		.loc 1 546 1 view .LVU256
 805 003c 2846     		mov	r0, r5
 806 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 807              	.LVL85:
 808              	.L45:
 521:rt_thread/src/object.c **** 
 809              		.loc 1 521 63 view .LVU257
 810 0040 3D46     		mov	r5, r7
 811 0042 FBE7     		b	.L40
 812              	.L46:
 521:rt_thread/src/object.c **** 
 813              		.loc 1 521 63 view .LVU258
 814 0044 0546     		mov	r5, r0
 815 0046 F9E7     		b	.L40
 816              		.cfi_endproc
 817              	.LFE25:
 819              		.section	.data.rt_object_container,"aw"
 820              		.align	2
 821              		.set	.LANCHOR0,. + 0
 824              	rt_object_container:
 825 0000 01       		.byte	1
 826 0001 000000   		.space	3
 827 0004 04000000 		.word	rt_object_container+4
ARM GAS  /tmp/cc5qvADp.s 			page 27


 828 0008 04000000 		.word	rt_object_container+4
 829 000c 78000000 		.word	120
 830 0010 02       		.byte	2
 831 0011 000000   		.space	3
 832 0014 14000000 		.word	rt_object_container+20
 833 0018 14000000 		.word	rt_object_container+20
 834 001c 20000000 		.word	32
 835 0020 05       		.byte	5
 836 0021 000000   		.space	3
 837 0024 24000000 		.word	rt_object_container+36
 838 0028 24000000 		.word	rt_object_container+36
 839 002c 30000000 		.word	48
 840 0030 0A       		.byte	10
 841 0031 000000   		.space	3
 842 0034 34000000 		.word	rt_object_container+52
 843 0038 34000000 		.word	rt_object_container+52
 844 003c 2C000000 		.word	44
 845              		.text
 846              	.Letext0:
 847              		.file 3 "rt_thread/include/rtdef.h"
 848              		.file 4 "rt_thread/include/rtthread.h"
 849              		.file 5 "rt_thread/include/rthw.h"
ARM GAS  /tmp/cc5qvADp.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 object.c
     /tmp/cc5qvADp.s:18     .text.rt_system_object_init:0000000000000000 $t
     /tmp/cc5qvADp.s:24     .text.rt_system_object_init:0000000000000000 rt_system_object_init
     /tmp/cc5qvADp.s:38     .text.rt_object_get_information:0000000000000000 $t
     /tmp/cc5qvADp.s:44     .text.rt_object_get_information:0000000000000000 rt_object_get_information
     /tmp/cc5qvADp.s:93     .text.rt_object_get_information:0000000000000020 $d
     /tmp/cc5qvADp.s:98     .text.rt_object_get_length:0000000000000000 $t
     /tmp/cc5qvADp.s:104    .text.rt_object_get_length:0000000000000000 rt_object_get_length
     /tmp/cc5qvADp.s:174    .text.rt_object_get_pointers:0000000000000000 $t
     /tmp/cc5qvADp.s:180    .text.rt_object_get_pointers:0000000000000000 rt_object_get_pointers
     /tmp/cc5qvADp.s:275    .text.rt_object_init:0000000000000000 $t
     /tmp/cc5qvADp.s:281    .text.rt_object_init:0000000000000000 rt_object_init
     /tmp/cc5qvADp.s:398    .text.rt_object_detach:0000000000000000 $t
     /tmp/cc5qvADp.s:404    .text.rt_object_detach:0000000000000000 rt_object_detach
     /tmp/cc5qvADp.s:467    .text.rt_object_allocate:0000000000000000 $t
     /tmp/cc5qvADp.s:473    .text.rt_object_allocate:0000000000000000 rt_object_allocate
     /tmp/cc5qvADp.s:579    .text.rt_object_delete:0000000000000000 $t
     /tmp/cc5qvADp.s:585    .text.rt_object_delete:0000000000000000 rt_object_delete
     /tmp/cc5qvADp.s:653    .text.rt_object_is_systemobject:0000000000000000 $t
     /tmp/cc5qvADp.s:659    .text.rt_object_is_systemobject:0000000000000000 rt_object_is_systemobject
     /tmp/cc5qvADp.s:690    .text.rt_object_get_type:0000000000000000 $t
     /tmp/cc5qvADp.s:696    .text.rt_object_get_type:0000000000000000 rt_object_get_type
     /tmp/cc5qvADp.s:716    .text.rt_object_find:0000000000000000 $t
     /tmp/cc5qvADp.s:722    .text.rt_object_find:0000000000000000 rt_object_find
     /tmp/cc5qvADp.s:820    .data.rt_object_container:0000000000000000 $d
     /tmp/cc5qvADp.s:824    .data.rt_object_container:0000000000000000 rt_object_container

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_enter_critical
rt_exit_critical
rt_strncpy
rt_malloc
rt_memset
rt_free
rt_strncmp
